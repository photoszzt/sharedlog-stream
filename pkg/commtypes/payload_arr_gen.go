package commtypes

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *PayloadArr) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "parr":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Payloads")
				return
			}
			if cap(z.Payloads) >= int(zb0002) {
				z.Payloads = (z.Payloads)[:zb0002]
			} else {
				z.Payloads = make([][]byte, zb0002)
			}
			for za0001 := range z.Payloads {
				z.Payloads[za0001], err = dc.ReadBytes(z.Payloads[za0001])
				if err != nil {
					err = msgp.WrapError(err, "Payloads", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *PayloadArr) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	if z.Payloads == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "parr"
		err = en.Append(0xa4, 0x70, 0x61, 0x72, 0x72)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Payloads)))
		if err != nil {
			err = msgp.WrapError(err, "Payloads")
			return
		}
		for za0001 := range z.Payloads {
			err = en.WriteBytes(z.Payloads[za0001])
			if err != nil {
				err = msgp.WrapError(err, "Payloads", za0001)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *PayloadArr) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	if z.Payloads == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "parr"
		o = append(o, 0xa4, 0x70, 0x61, 0x72, 0x72)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Payloads)))
		for za0001 := range z.Payloads {
			o = msgp.AppendBytes(o, z.Payloads[za0001])
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *PayloadArr) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "parr":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Payloads")
				return
			}
			if cap(z.Payloads) >= int(zb0002) {
				z.Payloads = (z.Payloads)[:zb0002]
			} else {
				z.Payloads = make([][]byte, zb0002)
			}
			for za0001 := range z.Payloads {
				z.Payloads[za0001], bts, err = msgp.ReadBytesBytes(bts, z.Payloads[za0001])
				if err != nil {
					err = msgp.WrapError(err, "Payloads", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *PayloadArr) Msgsize() (s int) {
	s = 1 + 5 + msgp.ArrayHeaderSize
	for za0001 := range z.Payloads {
		s += msgp.BytesPrefixSize + len(z.Payloads[za0001])
	}
	return
}
