// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package types

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Auction) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_e3caedb3b7ec15ca_1 = 10

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_e3caedb3b7ec15ca_1 uint32
	totalEncodedFields0zgensym_e3caedb3b7ec15ca_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_e3caedb3b7ec15ca_1 := totalEncodedFields0zgensym_e3caedb3b7ec15ca_1
	missingFieldsLeft0zgensym_e3caedb3b7ec15ca_1 := maxFields0zgensym_e3caedb3b7ec15ca_1 - totalEncodedFields0zgensym_e3caedb3b7ec15ca_1

	var nextMiss0zgensym_e3caedb3b7ec15ca_1 int32 = -1
	var found0zgensym_e3caedb3b7ec15ca_1 [maxFields0zgensym_e3caedb3b7ec15ca_1]bool
	var curField0zgensym_e3caedb3b7ec15ca_1 string

doneWithStruct0zgensym_e3caedb3b7ec15ca_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_e3caedb3b7ec15ca_1 > 0 || missingFieldsLeft0zgensym_e3caedb3b7ec15ca_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_e3caedb3b7ec15ca_1, missingFieldsLeft0zgensym_e3caedb3b7ec15ca_1, msgp.ShowFound(found0zgensym_e3caedb3b7ec15ca_1[:]), decodeMsgFieldOrder0zgensym_e3caedb3b7ec15ca_1)
		if encodedFieldsLeft0zgensym_e3caedb3b7ec15ca_1 > 0 {
			encodedFieldsLeft0zgensym_e3caedb3b7ec15ca_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_e3caedb3b7ec15ca_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_e3caedb3b7ec15ca_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_e3caedb3b7ec15ca_1 = 0
			}
			for nextMiss0zgensym_e3caedb3b7ec15ca_1 < maxFields0zgensym_e3caedb3b7ec15ca_1 && (found0zgensym_e3caedb3b7ec15ca_1[nextMiss0zgensym_e3caedb3b7ec15ca_1] || decodeMsgFieldSkip0zgensym_e3caedb3b7ec15ca_1[nextMiss0zgensym_e3caedb3b7ec15ca_1]) {
				nextMiss0zgensym_e3caedb3b7ec15ca_1++
			}
			if nextMiss0zgensym_e3caedb3b7ec15ca_1 == maxFields0zgensym_e3caedb3b7ec15ca_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_e3caedb3b7ec15ca_1
			}
			missingFieldsLeft0zgensym_e3caedb3b7ec15ca_1--
			curField0zgensym_e3caedb3b7ec15ca_1 = decodeMsgFieldOrder0zgensym_e3caedb3b7ec15ca_1[nextMiss0zgensym_e3caedb3b7ec15ca_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_e3caedb3b7ec15ca_1)
		switch curField0zgensym_e3caedb3b7ec15ca_1 {
		// -- templateDecodeMsg ends here --

		case "id_zid00_u64":
			found0zgensym_e3caedb3b7ec15ca_1[0] = true
			z.ID, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "itemName_zid01_str":
			found0zgensym_e3caedb3b7ec15ca_1[1] = true
			z.ItemName, err = dc.ReadString()
			if err != nil {
				return
			}
		case "description_zid02_str":
			found0zgensym_e3caedb3b7ec15ca_1[2] = true
			z.Description, err = dc.ReadString()
			if err != nil {
				return
			}
		case "initialBid_zid03_u64":
			found0zgensym_e3caedb3b7ec15ca_1[3] = true
			z.InitialBid, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "reserve_zid04_u64":
			found0zgensym_e3caedb3b7ec15ca_1[4] = true
			z.Reserve, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "dataTime_zid05_i64":
			found0zgensym_e3caedb3b7ec15ca_1[5] = true
			z.DateTime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "expires_zid06_i64":
			found0zgensym_e3caedb3b7ec15ca_1[6] = true
			z.Expires, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "seller_zid07_u64":
			found0zgensym_e3caedb3b7ec15ca_1[7] = true
			z.Seller, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "category_zid08_u64":
			found0zgensym_e3caedb3b7ec15ca_1[8] = true
			z.Category, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "extra_zid09_str":
			found0zgensym_e3caedb3b7ec15ca_1[9] = true
			z.Extra, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_e3caedb3b7ec15ca_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Auction
var decodeMsgFieldOrder0zgensym_e3caedb3b7ec15ca_1 = []string{"id_zid00_u64", "itemName_zid01_str", "description_zid02_str", "initialBid_zid03_u64", "reserve_zid04_u64", "dataTime_zid05_i64", "expires_zid06_i64", "seller_zid07_u64", "category_zid08_u64", "extra_zid09_str"}

var decodeMsgFieldSkip0zgensym_e3caedb3b7ec15ca_1 = []bool{false, false, false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Auction) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 10
	}
	var fieldsInUse uint32 = 10
	isempty[0] = (z.ID == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.ItemName) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.Description) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.InitialBid == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (z.Reserve == 0) // number, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.DateTime == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.Expires == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (z.Seller == 0) // number, omitempty
	if isempty[7] {
		fieldsInUse--
	}
	isempty[8] = (z.Category == 0) // number, omitempty
	if isempty[8] {
		fieldsInUse--
	}
	isempty[9] = (len(z.Extra) == 0) // string, omitempty
	if isempty[9] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Auction) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3caedb3b7ec15ca_2 [10]bool
	fieldsInUse_zgensym_e3caedb3b7ec15ca_3 := z.fieldsNotEmpty(empty_zgensym_e3caedb3b7ec15ca_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3caedb3b7ec15ca_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Auction'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[0] {
		// write "id_zid00_u64"
		err = en.Append(0xac, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[1] {
		// write "itemName_zid01_str"
		err = en.Append(0xb2, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.ItemName)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[2] {
		// write "description_zid02_str"
		err = en.Append(0xb5, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Description)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[3] {
		// write "initialBid_zid03_u64"
		err = en.Append(0xb4, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.InitialBid)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[4] {
		// write "reserve_zid04_u64"
		err = en.Append(0xb1, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Reserve)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[5] {
		// write "dataTime_zid05_i64"
		err = en.Append(0xb2, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.DateTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[6] {
		// write "expires_zid06_i64"
		err = en.Append(0xb1, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.Expires)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[7] {
		// write "seller_zid07_u64"
		err = en.Append(0xb0, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Seller)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[8] {
		// write "category_zid08_u64"
		err = en.Append(0xb2, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Category)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_2[9] {
		// write "extra_zid09_str"
		err = en.Append(0xaf, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Extra)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Auction) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [10]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "id_zid00_u64"
		o = append(o, 0xac, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.ID)
	}

	if !empty[1] {
		// string "itemName_zid01_str"
		o = append(o, 0xb2, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.ItemName)
	}

	if !empty[2] {
		// string "description_zid02_str"
		o = append(o, 0xb5, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Description)
	}

	if !empty[3] {
		// string "initialBid_zid03_u64"
		o = append(o, 0xb4, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.InitialBid)
	}

	if !empty[4] {
		// string "reserve_zid04_u64"
		o = append(o, 0xb1, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Reserve)
	}

	if !empty[5] {
		// string "dataTime_zid05_i64"
		o = append(o, 0xb2, 0x64, 0x61, 0x74, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.DateTime)
	}

	if !empty[6] {
		// string "expires_zid06_i64"
		o = append(o, 0xb1, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.Expires)
	}

	if !empty[7] {
		// string "seller_zid07_u64"
		o = append(o, 0xb0, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Seller)
	}

	if !empty[8] {
		// string "category_zid08_u64"
		o = append(o, 0xb2, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x38, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Category)
	}

	if !empty[9] {
		// string "extra_zid09_str"
		o = append(o, 0xaf, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x39, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Extra)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Auction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Auction) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_e3caedb3b7ec15ca_5 = 10

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_e3caedb3b7ec15ca_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_e3caedb3b7ec15ca_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_e3caedb3b7ec15ca_5 := totalEncodedFields4zgensym_e3caedb3b7ec15ca_5
	missingFieldsLeft4zgensym_e3caedb3b7ec15ca_5 := maxFields4zgensym_e3caedb3b7ec15ca_5 - totalEncodedFields4zgensym_e3caedb3b7ec15ca_5

	var nextMiss4zgensym_e3caedb3b7ec15ca_5 int32 = -1
	var found4zgensym_e3caedb3b7ec15ca_5 [maxFields4zgensym_e3caedb3b7ec15ca_5]bool
	var curField4zgensym_e3caedb3b7ec15ca_5 string

doneWithStruct4zgensym_e3caedb3b7ec15ca_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_e3caedb3b7ec15ca_5 > 0 || missingFieldsLeft4zgensym_e3caedb3b7ec15ca_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_e3caedb3b7ec15ca_5, missingFieldsLeft4zgensym_e3caedb3b7ec15ca_5, msgp.ShowFound(found4zgensym_e3caedb3b7ec15ca_5[:]), unmarshalMsgFieldOrder4zgensym_e3caedb3b7ec15ca_5)
		if encodedFieldsLeft4zgensym_e3caedb3b7ec15ca_5 > 0 {
			encodedFieldsLeft4zgensym_e3caedb3b7ec15ca_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_e3caedb3b7ec15ca_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_e3caedb3b7ec15ca_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_e3caedb3b7ec15ca_5 = 0
			}
			for nextMiss4zgensym_e3caedb3b7ec15ca_5 < maxFields4zgensym_e3caedb3b7ec15ca_5 && (found4zgensym_e3caedb3b7ec15ca_5[nextMiss4zgensym_e3caedb3b7ec15ca_5] || unmarshalMsgFieldSkip4zgensym_e3caedb3b7ec15ca_5[nextMiss4zgensym_e3caedb3b7ec15ca_5]) {
				nextMiss4zgensym_e3caedb3b7ec15ca_5++
			}
			if nextMiss4zgensym_e3caedb3b7ec15ca_5 == maxFields4zgensym_e3caedb3b7ec15ca_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_e3caedb3b7ec15ca_5
			}
			missingFieldsLeft4zgensym_e3caedb3b7ec15ca_5--
			curField4zgensym_e3caedb3b7ec15ca_5 = unmarshalMsgFieldOrder4zgensym_e3caedb3b7ec15ca_5[nextMiss4zgensym_e3caedb3b7ec15ca_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_e3caedb3b7ec15ca_5)
		switch curField4zgensym_e3caedb3b7ec15ca_5 {
		// -- templateUnmarshalMsg ends here --

		case "id_zid00_u64":
			found4zgensym_e3caedb3b7ec15ca_5[0] = true
			z.ID, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "itemName_zid01_str":
			found4zgensym_e3caedb3b7ec15ca_5[1] = true
			z.ItemName, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "description_zid02_str":
			found4zgensym_e3caedb3b7ec15ca_5[2] = true
			z.Description, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "initialBid_zid03_u64":
			found4zgensym_e3caedb3b7ec15ca_5[3] = true
			z.InitialBid, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "reserve_zid04_u64":
			found4zgensym_e3caedb3b7ec15ca_5[4] = true
			z.Reserve, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "dataTime_zid05_i64":
			found4zgensym_e3caedb3b7ec15ca_5[5] = true
			z.DateTime, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "expires_zid06_i64":
			found4zgensym_e3caedb3b7ec15ca_5[6] = true
			z.Expires, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "seller_zid07_u64":
			found4zgensym_e3caedb3b7ec15ca_5[7] = true
			z.Seller, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "category_zid08_u64":
			found4zgensym_e3caedb3b7ec15ca_5[8] = true
			z.Category, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "extra_zid09_str":
			found4zgensym_e3caedb3b7ec15ca_5[9] = true
			z.Extra, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_e3caedb3b7ec15ca_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Auction
var unmarshalMsgFieldOrder4zgensym_e3caedb3b7ec15ca_5 = []string{"id_zid00_u64", "itemName_zid01_str", "description_zid02_str", "initialBid_zid03_u64", "reserve_zid04_u64", "dataTime_zid05_i64", "expires_zid06_i64", "seller_zid07_u64", "category_zid08_u64", "extra_zid09_str"}

var unmarshalMsgFieldSkip4zgensym_e3caedb3b7ec15ca_5 = []bool{false, false, false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Auction) Msgsize() (s int) {
	s = 1 + 13 + msgp.Uint64Size + 19 + msgp.StringPrefixSize + len(z.ItemName) + 22 + msgp.StringPrefixSize + len(z.Description) + 21 + msgp.Uint64Size + 18 + msgp.Uint64Size + 19 + msgp.Int64Size + 18 + msgp.Int64Size + 17 + msgp.Uint64Size + 19 + msgp.Uint64Size + 16 + msgp.StringPrefixSize + len(z.Extra)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *AuctionIdCount) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_e3caedb3b7ec15ca_7 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_e3caedb3b7ec15ca_7 uint32
	totalEncodedFields6zgensym_e3caedb3b7ec15ca_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_e3caedb3b7ec15ca_7 := totalEncodedFields6zgensym_e3caedb3b7ec15ca_7
	missingFieldsLeft6zgensym_e3caedb3b7ec15ca_7 := maxFields6zgensym_e3caedb3b7ec15ca_7 - totalEncodedFields6zgensym_e3caedb3b7ec15ca_7

	var nextMiss6zgensym_e3caedb3b7ec15ca_7 int32 = -1
	var found6zgensym_e3caedb3b7ec15ca_7 [maxFields6zgensym_e3caedb3b7ec15ca_7]bool
	var curField6zgensym_e3caedb3b7ec15ca_7 string

doneWithStruct6zgensym_e3caedb3b7ec15ca_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_e3caedb3b7ec15ca_7 > 0 || missingFieldsLeft6zgensym_e3caedb3b7ec15ca_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_e3caedb3b7ec15ca_7, missingFieldsLeft6zgensym_e3caedb3b7ec15ca_7, msgp.ShowFound(found6zgensym_e3caedb3b7ec15ca_7[:]), decodeMsgFieldOrder6zgensym_e3caedb3b7ec15ca_7)
		if encodedFieldsLeft6zgensym_e3caedb3b7ec15ca_7 > 0 {
			encodedFieldsLeft6zgensym_e3caedb3b7ec15ca_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_e3caedb3b7ec15ca_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_e3caedb3b7ec15ca_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_e3caedb3b7ec15ca_7 = 0
			}
			for nextMiss6zgensym_e3caedb3b7ec15ca_7 < maxFields6zgensym_e3caedb3b7ec15ca_7 && (found6zgensym_e3caedb3b7ec15ca_7[nextMiss6zgensym_e3caedb3b7ec15ca_7] || decodeMsgFieldSkip6zgensym_e3caedb3b7ec15ca_7[nextMiss6zgensym_e3caedb3b7ec15ca_7]) {
				nextMiss6zgensym_e3caedb3b7ec15ca_7++
			}
			if nextMiss6zgensym_e3caedb3b7ec15ca_7 == maxFields6zgensym_e3caedb3b7ec15ca_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_e3caedb3b7ec15ca_7
			}
			missingFieldsLeft6zgensym_e3caedb3b7ec15ca_7--
			curField6zgensym_e3caedb3b7ec15ca_7 = decodeMsgFieldOrder6zgensym_e3caedb3b7ec15ca_7[nextMiss6zgensym_e3caedb3b7ec15ca_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_e3caedb3b7ec15ca_7)
		switch curField6zgensym_e3caedb3b7ec15ca_7 {
		// -- templateDecodeMsg ends here --

		case "AucId_zid00_u64":
			found6zgensym_e3caedb3b7ec15ca_7[0] = true
			z.AucId, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "Count_zid01_u64":
			found6zgensym_e3caedb3b7ec15ca_7[1] = true
			z.Count, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_e3caedb3b7ec15ca_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of AuctionIdCount
var decodeMsgFieldOrder6zgensym_e3caedb3b7ec15ca_7 = []string{"AucId_zid00_u64", "Count_zid01_u64"}

var decodeMsgFieldSkip6zgensym_e3caedb3b7ec15ca_7 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z AuctionIdCount) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.AucId == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Count == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z AuctionIdCount) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3caedb3b7ec15ca_8 [2]bool
	fieldsInUse_zgensym_e3caedb3b7ec15ca_9 := z.fieldsNotEmpty(empty_zgensym_e3caedb3b7ec15ca_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3caedb3b7ec15ca_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'AuctionIdCount'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3caedb3b7ec15ca_8[0] {
		// write "AucId_zid00_u64"
		err = en.Append(0xaf, 0x41, 0x75, 0x63, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.AucId)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_8[1] {
		// write "Count_zid01_u64"
		err = en.Append(0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Count)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z AuctionIdCount) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "AucId_zid00_u64"
		o = append(o, 0xaf, 0x41, 0x75, 0x63, 0x49, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.AucId)
	}

	if !empty[1] {
		// string "Count_zid01_u64"
		o = append(o, 0xaf, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Count)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AuctionIdCount) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *AuctionIdCount) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_e3caedb3b7ec15ca_11 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_e3caedb3b7ec15ca_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_e3caedb3b7ec15ca_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_e3caedb3b7ec15ca_11 := totalEncodedFields10zgensym_e3caedb3b7ec15ca_11
	missingFieldsLeft10zgensym_e3caedb3b7ec15ca_11 := maxFields10zgensym_e3caedb3b7ec15ca_11 - totalEncodedFields10zgensym_e3caedb3b7ec15ca_11

	var nextMiss10zgensym_e3caedb3b7ec15ca_11 int32 = -1
	var found10zgensym_e3caedb3b7ec15ca_11 [maxFields10zgensym_e3caedb3b7ec15ca_11]bool
	var curField10zgensym_e3caedb3b7ec15ca_11 string

doneWithStruct10zgensym_e3caedb3b7ec15ca_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_e3caedb3b7ec15ca_11 > 0 || missingFieldsLeft10zgensym_e3caedb3b7ec15ca_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_e3caedb3b7ec15ca_11, missingFieldsLeft10zgensym_e3caedb3b7ec15ca_11, msgp.ShowFound(found10zgensym_e3caedb3b7ec15ca_11[:]), unmarshalMsgFieldOrder10zgensym_e3caedb3b7ec15ca_11)
		if encodedFieldsLeft10zgensym_e3caedb3b7ec15ca_11 > 0 {
			encodedFieldsLeft10zgensym_e3caedb3b7ec15ca_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_e3caedb3b7ec15ca_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_e3caedb3b7ec15ca_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_e3caedb3b7ec15ca_11 = 0
			}
			for nextMiss10zgensym_e3caedb3b7ec15ca_11 < maxFields10zgensym_e3caedb3b7ec15ca_11 && (found10zgensym_e3caedb3b7ec15ca_11[nextMiss10zgensym_e3caedb3b7ec15ca_11] || unmarshalMsgFieldSkip10zgensym_e3caedb3b7ec15ca_11[nextMiss10zgensym_e3caedb3b7ec15ca_11]) {
				nextMiss10zgensym_e3caedb3b7ec15ca_11++
			}
			if nextMiss10zgensym_e3caedb3b7ec15ca_11 == maxFields10zgensym_e3caedb3b7ec15ca_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_e3caedb3b7ec15ca_11
			}
			missingFieldsLeft10zgensym_e3caedb3b7ec15ca_11--
			curField10zgensym_e3caedb3b7ec15ca_11 = unmarshalMsgFieldOrder10zgensym_e3caedb3b7ec15ca_11[nextMiss10zgensym_e3caedb3b7ec15ca_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_e3caedb3b7ec15ca_11)
		switch curField10zgensym_e3caedb3b7ec15ca_11 {
		// -- templateUnmarshalMsg ends here --

		case "AucId_zid00_u64":
			found10zgensym_e3caedb3b7ec15ca_11[0] = true
			z.AucId, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "Count_zid01_u64":
			found10zgensym_e3caedb3b7ec15ca_11[1] = true
			z.Count, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_e3caedb3b7ec15ca_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of AuctionIdCount
var unmarshalMsgFieldOrder10zgensym_e3caedb3b7ec15ca_11 = []string{"AucId_zid00_u64", "Count_zid01_u64"}

var unmarshalMsgFieldSkip10zgensym_e3caedb3b7ec15ca_11 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AuctionIdCount) Msgsize() (s int) {
	s = 1 + 16 + msgp.Uint64Size + 16 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Bid) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_e3caedb3b7ec15ca_13 = 7

	// -- templateDecodeMsg starts here--
	var totalEncodedFields12zgensym_e3caedb3b7ec15ca_13 uint32
	totalEncodedFields12zgensym_e3caedb3b7ec15ca_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_e3caedb3b7ec15ca_13 := totalEncodedFields12zgensym_e3caedb3b7ec15ca_13
	missingFieldsLeft12zgensym_e3caedb3b7ec15ca_13 := maxFields12zgensym_e3caedb3b7ec15ca_13 - totalEncodedFields12zgensym_e3caedb3b7ec15ca_13

	var nextMiss12zgensym_e3caedb3b7ec15ca_13 int32 = -1
	var found12zgensym_e3caedb3b7ec15ca_13 [maxFields12zgensym_e3caedb3b7ec15ca_13]bool
	var curField12zgensym_e3caedb3b7ec15ca_13 string

doneWithStruct12zgensym_e3caedb3b7ec15ca_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_e3caedb3b7ec15ca_13 > 0 || missingFieldsLeft12zgensym_e3caedb3b7ec15ca_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_e3caedb3b7ec15ca_13, missingFieldsLeft12zgensym_e3caedb3b7ec15ca_13, msgp.ShowFound(found12zgensym_e3caedb3b7ec15ca_13[:]), decodeMsgFieldOrder12zgensym_e3caedb3b7ec15ca_13)
		if encodedFieldsLeft12zgensym_e3caedb3b7ec15ca_13 > 0 {
			encodedFieldsLeft12zgensym_e3caedb3b7ec15ca_13--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField12zgensym_e3caedb3b7ec15ca_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_e3caedb3b7ec15ca_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_e3caedb3b7ec15ca_13 = 0
			}
			for nextMiss12zgensym_e3caedb3b7ec15ca_13 < maxFields12zgensym_e3caedb3b7ec15ca_13 && (found12zgensym_e3caedb3b7ec15ca_13[nextMiss12zgensym_e3caedb3b7ec15ca_13] || decodeMsgFieldSkip12zgensym_e3caedb3b7ec15ca_13[nextMiss12zgensym_e3caedb3b7ec15ca_13]) {
				nextMiss12zgensym_e3caedb3b7ec15ca_13++
			}
			if nextMiss12zgensym_e3caedb3b7ec15ca_13 == maxFields12zgensym_e3caedb3b7ec15ca_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_e3caedb3b7ec15ca_13
			}
			missingFieldsLeft12zgensym_e3caedb3b7ec15ca_13--
			curField12zgensym_e3caedb3b7ec15ca_13 = decodeMsgFieldOrder12zgensym_e3caedb3b7ec15ca_13[nextMiss12zgensym_e3caedb3b7ec15ca_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_e3caedb3b7ec15ca_13)
		switch curField12zgensym_e3caedb3b7ec15ca_13 {
		// -- templateDecodeMsg ends here --

		case "auction_zid00_u64":
			found12zgensym_e3caedb3b7ec15ca_13[0] = true
			z.Auction, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "bidder_zid01_u64":
			found12zgensym_e3caedb3b7ec15ca_13[1] = true
			z.Bidder, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "price_zid02_u64":
			found12zgensym_e3caedb3b7ec15ca_13[2] = true
			z.Price, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "channel_zid03_str":
			found12zgensym_e3caedb3b7ec15ca_13[3] = true
			z.Channel, err = dc.ReadString()
			if err != nil {
				return
			}
		case "url_zid04_str":
			found12zgensym_e3caedb3b7ec15ca_13[4] = true
			z.Url, err = dc.ReadString()
			if err != nil {
				return
			}
		case "dateTime_zid05_i64":
			found12zgensym_e3caedb3b7ec15ca_13[5] = true
			z.DateTime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "extra_zid06_str":
			found12zgensym_e3caedb3b7ec15ca_13[6] = true
			z.Extra, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_e3caedb3b7ec15ca_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Bid
var decodeMsgFieldOrder12zgensym_e3caedb3b7ec15ca_13 = []string{"auction_zid00_u64", "bidder_zid01_u64", "price_zid02_u64", "channel_zid03_str", "url_zid04_str", "dateTime_zid05_i64", "extra_zid06_str"}

var decodeMsgFieldSkip12zgensym_e3caedb3b7ec15ca_13 = []bool{false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Bid) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 7
	}
	var fieldsInUse uint32 = 7
	isempty[0] = (z.Auction == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Bidder == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.Price == 0) // number, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.Channel) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.Url) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (z.DateTime == 0) // number, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (len(z.Extra) == 0) // string, omitempty
	if isempty[6] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Bid) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3caedb3b7ec15ca_14 [7]bool
	fieldsInUse_zgensym_e3caedb3b7ec15ca_15 := z.fieldsNotEmpty(empty_zgensym_e3caedb3b7ec15ca_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3caedb3b7ec15ca_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Bid'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x42, 0x69, 0x64})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[0] {
		// write "auction_zid00_u64"
		err = en.Append(0xb1, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Auction)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[1] {
		// write "bidder_zid01_u64"
		err = en.Append(0xb0, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Bidder)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[2] {
		// write "price_zid02_u64"
		err = en.Append(0xaf, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Price)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[3] {
		// write "channel_zid03_str"
		err = en.Append(0xb1, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Channel)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[4] {
		// write "url_zid04_str"
		err = en.Append(0xad, 0x75, 0x72, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Url)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[5] {
		// write "dateTime_zid05_i64"
		err = en.Append(0xb2, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.DateTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_14[6] {
		// write "extra_zid06_str"
		err = en.Append(0xaf, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Extra)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Bid) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [7]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "auction_zid00_u64"
		o = append(o, 0xb1, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Auction)
	}

	if !empty[1] {
		// string "bidder_zid01_u64"
		o = append(o, 0xb0, 0x62, 0x69, 0x64, 0x64, 0x65, 0x72, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Bidder)
	}

	if !empty[2] {
		// string "price_zid02_u64"
		o = append(o, 0xaf, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Price)
	}

	if !empty[3] {
		// string "channel_zid03_str"
		o = append(o, 0xb1, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Channel)
	}

	if !empty[4] {
		// string "url_zid04_str"
		o = append(o, 0xad, 0x75, 0x72, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Url)
	}

	if !empty[5] {
		// string "dateTime_zid05_i64"
		o = append(o, 0xb2, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.DateTime)
	}

	if !empty[6] {
		// string "extra_zid06_str"
		o = append(o, 0xaf, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Extra)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Bid) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Bid) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_e3caedb3b7ec15ca_17 = 7

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_e3caedb3b7ec15ca_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_e3caedb3b7ec15ca_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_e3caedb3b7ec15ca_17 := totalEncodedFields16zgensym_e3caedb3b7ec15ca_17
	missingFieldsLeft16zgensym_e3caedb3b7ec15ca_17 := maxFields16zgensym_e3caedb3b7ec15ca_17 - totalEncodedFields16zgensym_e3caedb3b7ec15ca_17

	var nextMiss16zgensym_e3caedb3b7ec15ca_17 int32 = -1
	var found16zgensym_e3caedb3b7ec15ca_17 [maxFields16zgensym_e3caedb3b7ec15ca_17]bool
	var curField16zgensym_e3caedb3b7ec15ca_17 string

doneWithStruct16zgensym_e3caedb3b7ec15ca_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_e3caedb3b7ec15ca_17 > 0 || missingFieldsLeft16zgensym_e3caedb3b7ec15ca_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_e3caedb3b7ec15ca_17, missingFieldsLeft16zgensym_e3caedb3b7ec15ca_17, msgp.ShowFound(found16zgensym_e3caedb3b7ec15ca_17[:]), unmarshalMsgFieldOrder16zgensym_e3caedb3b7ec15ca_17)
		if encodedFieldsLeft16zgensym_e3caedb3b7ec15ca_17 > 0 {
			encodedFieldsLeft16zgensym_e3caedb3b7ec15ca_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_e3caedb3b7ec15ca_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_e3caedb3b7ec15ca_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_e3caedb3b7ec15ca_17 = 0
			}
			for nextMiss16zgensym_e3caedb3b7ec15ca_17 < maxFields16zgensym_e3caedb3b7ec15ca_17 && (found16zgensym_e3caedb3b7ec15ca_17[nextMiss16zgensym_e3caedb3b7ec15ca_17] || unmarshalMsgFieldSkip16zgensym_e3caedb3b7ec15ca_17[nextMiss16zgensym_e3caedb3b7ec15ca_17]) {
				nextMiss16zgensym_e3caedb3b7ec15ca_17++
			}
			if nextMiss16zgensym_e3caedb3b7ec15ca_17 == maxFields16zgensym_e3caedb3b7ec15ca_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_e3caedb3b7ec15ca_17
			}
			missingFieldsLeft16zgensym_e3caedb3b7ec15ca_17--
			curField16zgensym_e3caedb3b7ec15ca_17 = unmarshalMsgFieldOrder16zgensym_e3caedb3b7ec15ca_17[nextMiss16zgensym_e3caedb3b7ec15ca_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_e3caedb3b7ec15ca_17)
		switch curField16zgensym_e3caedb3b7ec15ca_17 {
		// -- templateUnmarshalMsg ends here --

		case "auction_zid00_u64":
			found16zgensym_e3caedb3b7ec15ca_17[0] = true
			z.Auction, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "bidder_zid01_u64":
			found16zgensym_e3caedb3b7ec15ca_17[1] = true
			z.Bidder, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "price_zid02_u64":
			found16zgensym_e3caedb3b7ec15ca_17[2] = true
			z.Price, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "channel_zid03_str":
			found16zgensym_e3caedb3b7ec15ca_17[3] = true
			z.Channel, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "url_zid04_str":
			found16zgensym_e3caedb3b7ec15ca_17[4] = true
			z.Url, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "dateTime_zid05_i64":
			found16zgensym_e3caedb3b7ec15ca_17[5] = true
			z.DateTime, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "extra_zid06_str":
			found16zgensym_e3caedb3b7ec15ca_17[6] = true
			z.Extra, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_e3caedb3b7ec15ca_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Bid
var unmarshalMsgFieldOrder16zgensym_e3caedb3b7ec15ca_17 = []string{"auction_zid00_u64", "bidder_zid01_u64", "price_zid02_u64", "channel_zid03_str", "url_zid04_str", "dateTime_zid05_i64", "extra_zid06_str"}

var unmarshalMsgFieldSkip16zgensym_e3caedb3b7ec15ca_17 = []bool{false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Bid) Msgsize() (s int) {
	s = 1 + 18 + msgp.Uint64Size + 17 + msgp.Uint64Size + 16 + msgp.Uint64Size + 18 + msgp.StringPrefixSize + len(z.Channel) + 14 + msgp.StringPrefixSize + len(z.Url) + 19 + msgp.Int64Size + 16 + msgp.StringPrefixSize + len(z.Extra)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *EType) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_e3caedb3b7ec15ca_18 uint8
		zgensym_e3caedb3b7ec15ca_18, err = dc.ReadUint8()
		(*z) = EType(zgensym_e3caedb3b7ec15ca_18)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z EType) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EType) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *EType) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_e3caedb3b7ec15ca_19 uint8
		zgensym_e3caedb3b7ec15ca_19, bts, err = nbs.ReadUint8Bytes(bts)

		if err != nil {
			return
		}
		(*z) = EType(zgensym_e3caedb3b7ec15ca_19)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Event) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields20zgensym_e3caedb3b7ec15ca_21 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields20zgensym_e3caedb3b7ec15ca_21 uint32
	totalEncodedFields20zgensym_e3caedb3b7ec15ca_21, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft20zgensym_e3caedb3b7ec15ca_21 := totalEncodedFields20zgensym_e3caedb3b7ec15ca_21
	missingFieldsLeft20zgensym_e3caedb3b7ec15ca_21 := maxFields20zgensym_e3caedb3b7ec15ca_21 - totalEncodedFields20zgensym_e3caedb3b7ec15ca_21

	var nextMiss20zgensym_e3caedb3b7ec15ca_21 int32 = -1
	var found20zgensym_e3caedb3b7ec15ca_21 [maxFields20zgensym_e3caedb3b7ec15ca_21]bool
	var curField20zgensym_e3caedb3b7ec15ca_21 string

doneWithStruct20zgensym_e3caedb3b7ec15ca_21:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft20zgensym_e3caedb3b7ec15ca_21 > 0 || missingFieldsLeft20zgensym_e3caedb3b7ec15ca_21 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft20zgensym_e3caedb3b7ec15ca_21, missingFieldsLeft20zgensym_e3caedb3b7ec15ca_21, msgp.ShowFound(found20zgensym_e3caedb3b7ec15ca_21[:]), decodeMsgFieldOrder20zgensym_e3caedb3b7ec15ca_21)
		if encodedFieldsLeft20zgensym_e3caedb3b7ec15ca_21 > 0 {
			encodedFieldsLeft20zgensym_e3caedb3b7ec15ca_21--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField20zgensym_e3caedb3b7ec15ca_21 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss20zgensym_e3caedb3b7ec15ca_21 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss20zgensym_e3caedb3b7ec15ca_21 = 0
			}
			for nextMiss20zgensym_e3caedb3b7ec15ca_21 < maxFields20zgensym_e3caedb3b7ec15ca_21 && (found20zgensym_e3caedb3b7ec15ca_21[nextMiss20zgensym_e3caedb3b7ec15ca_21] || decodeMsgFieldSkip20zgensym_e3caedb3b7ec15ca_21[nextMiss20zgensym_e3caedb3b7ec15ca_21]) {
				nextMiss20zgensym_e3caedb3b7ec15ca_21++
			}
			if nextMiss20zgensym_e3caedb3b7ec15ca_21 == maxFields20zgensym_e3caedb3b7ec15ca_21 {
				// filled all the empty fields!
				break doneWithStruct20zgensym_e3caedb3b7ec15ca_21
			}
			missingFieldsLeft20zgensym_e3caedb3b7ec15ca_21--
			curField20zgensym_e3caedb3b7ec15ca_21 = decodeMsgFieldOrder20zgensym_e3caedb3b7ec15ca_21[nextMiss20zgensym_e3caedb3b7ec15ca_21]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField20zgensym_e3caedb3b7ec15ca_21)
		switch curField20zgensym_e3caedb3b7ec15ca_21 {
		// -- templateDecodeMsg ends here --

		case "Etype_zid00_rct":
			found20zgensym_e3caedb3b7ec15ca_21[0] = true
			{
				var zgensym_e3caedb3b7ec15ca_22 uint8
				zgensym_e3caedb3b7ec15ca_22, err = dc.ReadUint8()
				z.Etype = EType(zgensym_e3caedb3b7ec15ca_22)
			}
			if err != nil {
				return
			}
		case "NewPerson_zid01_ptr":
			found20zgensym_e3caedb3b7ec15ca_21[1] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.NewPerson != nil {
					dc.PushAlwaysNil()
					err = z.NewPerson.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.NewPerson == nil {
					z.NewPerson = new(Person)
				}
				dc.DedupIndexEachPtr(z.NewPerson)

				err = z.NewPerson.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "NewAuction_zid02_ptr":
			found20zgensym_e3caedb3b7ec15ca_21[2] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.NewAuction != nil {
					dc.PushAlwaysNil()
					err = z.NewAuction.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.NewAuction == nil {
					z.NewAuction = new(Auction)
				}
				dc.DedupIndexEachPtr(z.NewAuction)

				err = z.NewAuction.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		case "Bid_zid03_ptr":
			found20zgensym_e3caedb3b7ec15ca_21[3] = true
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					return
				}

				if z.Bid != nil {
					dc.PushAlwaysNil()
					err = z.Bid.DecodeMsg(dc)
					if err != nil {
						return
					}
					dc.PopAlwaysNil()
				}
			} else {
				// not Nil, we have something to read

				if z.Bid == nil {
					z.Bid = new(Bid)
				}
				dc.DedupIndexEachPtr(z.Bid)

				err = z.Bid.DecodeMsg(dc)
				if err != nil {
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss20zgensym_e3caedb3b7ec15ca_21 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Event
var decodeMsgFieldOrder20zgensym_e3caedb3b7ec15ca_21 = []string{"Etype_zid00_rct", "NewPerson_zid01_ptr", "NewAuction_zid02_ptr", "Bid_zid03_ptr"}

var decodeMsgFieldSkip20zgensym_e3caedb3b7ec15ca_21 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Event) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (z.Etype == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.NewPerson == nil) // pointer, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (z.NewAuction == nil) // pointer, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.Bid == nil) // pointer, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Event) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3caedb3b7ec15ca_23 [4]bool
	fieldsInUse_zgensym_e3caedb3b7ec15ca_24 := z.fieldsNotEmpty(empty_zgensym_e3caedb3b7ec15ca_23[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3caedb3b7ec15ca_24 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Event'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x45, 0x76, 0x65, 0x6e, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3caedb3b7ec15ca_23[0] {
		// write "Etype_zid00_rct"
		err = en.Append(0xaf, 0x45, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteUint8(uint8(z.Etype))
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_23[1] {
		// write "NewPerson_zid01_ptr"
		err = en.Append(0xb3, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.NewPerson == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.NewPerson)
			if err != nil {
				return
			}
			if !dup {
				err = z.NewPerson.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_23[2] {
		// write "NewAuction_zid02_ptr"
		err = en.Append(0xb4, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.NewAuction == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.NewAuction)
			if err != nil {
				return
			}
			if !dup {
				err = z.NewAuction.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_23[3] {
		// write "Bid_zid03_ptr"
		err = en.Append(0xad, 0x42, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x70, 0x74, 0x72)
		if err != nil {
			return err
		}
		// gPtr.encodeGen():

		if z.Bid == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			// encodeGen.gBase IDENT

			// record the interface for deduplication
			var dup bool
			dup, err = en.DedupWriteIsDup(z.Bid)
			if err != nil {
				return
			}
			if !dup {
				err = z.Bid.EncodeMsg(en)
				if err != nil {
					return
				}
			}
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Event) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Etype_zid00_rct"
		o = append(o, 0xaf, 0x45, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendUint8(o, uint8(z.Etype))
	}

	if !empty[1] {
		// string "NewPerson_zid01_ptr"
		o = append(o, 0xb3, 0x4e, 0x65, 0x77, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.NewPerson == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.NewPerson.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[2] {
		// string "NewAuction_zid02_ptr"
		o = append(o, 0xb4, 0x4e, 0x65, 0x77, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.NewAuction == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.NewAuction.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	if !empty[3] {
		// string "Bid_zid03_ptr"
		o = append(o, 0xad, 0x42, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x70, 0x74, 0x72)
		// marshalGen.gPtr()

		if z.Bid == nil {
			o = msgp.AppendNil(o)
		} else {
			// hmm.. no en, no place to check en.DedupWriteIsDup(z)

			o, err = z.Bid.MarshalMsg(o) // not is.iface, gen/marshal.go:243
			if err != nil {
				return
			}
		}
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Event) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Event) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields25zgensym_e3caedb3b7ec15ca_26 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields25zgensym_e3caedb3b7ec15ca_26 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields25zgensym_e3caedb3b7ec15ca_26, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft25zgensym_e3caedb3b7ec15ca_26 := totalEncodedFields25zgensym_e3caedb3b7ec15ca_26
	missingFieldsLeft25zgensym_e3caedb3b7ec15ca_26 := maxFields25zgensym_e3caedb3b7ec15ca_26 - totalEncodedFields25zgensym_e3caedb3b7ec15ca_26

	var nextMiss25zgensym_e3caedb3b7ec15ca_26 int32 = -1
	var found25zgensym_e3caedb3b7ec15ca_26 [maxFields25zgensym_e3caedb3b7ec15ca_26]bool
	var curField25zgensym_e3caedb3b7ec15ca_26 string

doneWithStruct25zgensym_e3caedb3b7ec15ca_26:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft25zgensym_e3caedb3b7ec15ca_26 > 0 || missingFieldsLeft25zgensym_e3caedb3b7ec15ca_26 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft25zgensym_e3caedb3b7ec15ca_26, missingFieldsLeft25zgensym_e3caedb3b7ec15ca_26, msgp.ShowFound(found25zgensym_e3caedb3b7ec15ca_26[:]), unmarshalMsgFieldOrder25zgensym_e3caedb3b7ec15ca_26)
		if encodedFieldsLeft25zgensym_e3caedb3b7ec15ca_26 > 0 {
			encodedFieldsLeft25zgensym_e3caedb3b7ec15ca_26--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField25zgensym_e3caedb3b7ec15ca_26 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss25zgensym_e3caedb3b7ec15ca_26 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss25zgensym_e3caedb3b7ec15ca_26 = 0
			}
			for nextMiss25zgensym_e3caedb3b7ec15ca_26 < maxFields25zgensym_e3caedb3b7ec15ca_26 && (found25zgensym_e3caedb3b7ec15ca_26[nextMiss25zgensym_e3caedb3b7ec15ca_26] || unmarshalMsgFieldSkip25zgensym_e3caedb3b7ec15ca_26[nextMiss25zgensym_e3caedb3b7ec15ca_26]) {
				nextMiss25zgensym_e3caedb3b7ec15ca_26++
			}
			if nextMiss25zgensym_e3caedb3b7ec15ca_26 == maxFields25zgensym_e3caedb3b7ec15ca_26 {
				// filled all the empty fields!
				break doneWithStruct25zgensym_e3caedb3b7ec15ca_26
			}
			missingFieldsLeft25zgensym_e3caedb3b7ec15ca_26--
			curField25zgensym_e3caedb3b7ec15ca_26 = unmarshalMsgFieldOrder25zgensym_e3caedb3b7ec15ca_26[nextMiss25zgensym_e3caedb3b7ec15ca_26]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField25zgensym_e3caedb3b7ec15ca_26)
		switch curField25zgensym_e3caedb3b7ec15ca_26 {
		// -- templateUnmarshalMsg ends here --

		case "Etype_zid00_rct":
			found25zgensym_e3caedb3b7ec15ca_26[0] = true
			{
				var zgensym_e3caedb3b7ec15ca_27 uint8
				zgensym_e3caedb3b7ec15ca_27, bts, err = nbs.ReadUint8Bytes(bts)

				if err != nil {
					return
				}
				z.Etype = EType(zgensym_e3caedb3b7ec15ca_27)
			}
		case "NewPerson_zid01_ptr":
			found25zgensym_e3caedb3b7ec15ca_26[1] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.NewPerson", alias:"Person", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.NewPerson != nil {
					z.NewPerson.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.NewPerson {
						z.NewPerson.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.NewPerson == nil {
						z.NewPerson = new(Person)
					}

					bts, err = z.NewPerson.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "NewAuction_zid02_ptr":
			found25zgensym_e3caedb3b7ec15ca_26[2] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.NewAuction", alias:"Auction", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.NewAuction != nil {
					z.NewAuction.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.NewAuction {
						z.NewAuction.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.NewAuction == nil {
						z.NewAuction = new(Auction)
					}

					bts, err = z.NewAuction.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		case "Bid_zid03_ptr":
			found25zgensym_e3caedb3b7ec15ca_26[3] = true
			// unmarshalGen.gPtr(): we have a BaseElem: &gen.BaseElem{Common:gen.Common{vname:"z.Bid", alias:"Bid", hmp:gen.HasMethodPrefix(nil), zid:0}, ShimToBase:"", ShimFromBase:"", Value:0x16, Convert:false, mustinline:false, needsref:false, isIface:false, isInIfaceSlice:false}

			// unmarshalGen.gPtr(): we have an IDENT:

			if nbs.AlwaysNil {
				if z.Bid != nil {
					z.Bid.UnmarshalMsg(msgp.OnlyNilSlice)
				}
			} else {
				// not nbs.AlwaysNil
				if msgp.IsNil(bts) {
					bts = bts[1:]
					if nil != z.Bid {
						z.Bid.UnmarshalMsg(msgp.OnlyNilSlice)
					}
				} else {
					// not nbs.AlwaysNil and not IsNil(bts): have something to read

					if z.Bid == nil {
						z.Bid = new(Bid)
					}

					bts, err = z.Bid.UnmarshalMsg(bts)
					if err != nil {
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss25zgensym_e3caedb3b7ec15ca_26 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Event
var unmarshalMsgFieldOrder25zgensym_e3caedb3b7ec15ca_26 = []string{"Etype_zid00_rct", "NewPerson_zid01_ptr", "NewAuction_zid02_ptr", "Bid_zid03_ptr"}

var unmarshalMsgFieldSkip25zgensym_e3caedb3b7ec15ca_26 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Event) Msgsize() (s int) {
	s = 1 + 16 + msgp.Uint8Size + 20
	if z.NewPerson == nil {
		s += msgp.NilSize
	} else {
		s += z.NewPerson.Msgsize()
	}
	s += 21
	if z.NewAuction == nil {
		s += msgp.NilSize
	} else {
		s += z.NewAuction.Msgsize()
	}
	s += 14
	if z.Bid == nil {
		s += msgp.NilSize
	} else {
		s += z.Bid.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *NameCityStateId) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields28zgensym_e3caedb3b7ec15ca_29 = 4

	// -- templateDecodeMsg starts here--
	var totalEncodedFields28zgensym_e3caedb3b7ec15ca_29 uint32
	totalEncodedFields28zgensym_e3caedb3b7ec15ca_29, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft28zgensym_e3caedb3b7ec15ca_29 := totalEncodedFields28zgensym_e3caedb3b7ec15ca_29
	missingFieldsLeft28zgensym_e3caedb3b7ec15ca_29 := maxFields28zgensym_e3caedb3b7ec15ca_29 - totalEncodedFields28zgensym_e3caedb3b7ec15ca_29

	var nextMiss28zgensym_e3caedb3b7ec15ca_29 int32 = -1
	var found28zgensym_e3caedb3b7ec15ca_29 [maxFields28zgensym_e3caedb3b7ec15ca_29]bool
	var curField28zgensym_e3caedb3b7ec15ca_29 string

doneWithStruct28zgensym_e3caedb3b7ec15ca_29:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft28zgensym_e3caedb3b7ec15ca_29 > 0 || missingFieldsLeft28zgensym_e3caedb3b7ec15ca_29 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft28zgensym_e3caedb3b7ec15ca_29, missingFieldsLeft28zgensym_e3caedb3b7ec15ca_29, msgp.ShowFound(found28zgensym_e3caedb3b7ec15ca_29[:]), decodeMsgFieldOrder28zgensym_e3caedb3b7ec15ca_29)
		if encodedFieldsLeft28zgensym_e3caedb3b7ec15ca_29 > 0 {
			encodedFieldsLeft28zgensym_e3caedb3b7ec15ca_29--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField28zgensym_e3caedb3b7ec15ca_29 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss28zgensym_e3caedb3b7ec15ca_29 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss28zgensym_e3caedb3b7ec15ca_29 = 0
			}
			for nextMiss28zgensym_e3caedb3b7ec15ca_29 < maxFields28zgensym_e3caedb3b7ec15ca_29 && (found28zgensym_e3caedb3b7ec15ca_29[nextMiss28zgensym_e3caedb3b7ec15ca_29] || decodeMsgFieldSkip28zgensym_e3caedb3b7ec15ca_29[nextMiss28zgensym_e3caedb3b7ec15ca_29]) {
				nextMiss28zgensym_e3caedb3b7ec15ca_29++
			}
			if nextMiss28zgensym_e3caedb3b7ec15ca_29 == maxFields28zgensym_e3caedb3b7ec15ca_29 {
				// filled all the empty fields!
				break doneWithStruct28zgensym_e3caedb3b7ec15ca_29
			}
			missingFieldsLeft28zgensym_e3caedb3b7ec15ca_29--
			curField28zgensym_e3caedb3b7ec15ca_29 = decodeMsgFieldOrder28zgensym_e3caedb3b7ec15ca_29[nextMiss28zgensym_e3caedb3b7ec15ca_29]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField28zgensym_e3caedb3b7ec15ca_29)
		switch curField28zgensym_e3caedb3b7ec15ca_29 {
		// -- templateDecodeMsg ends here --

		case "Name_zid00_str":
			found28zgensym_e3caedb3b7ec15ca_29[0] = true
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "City_zid01_str":
			found28zgensym_e3caedb3b7ec15ca_29[1] = true
			z.City, err = dc.ReadString()
			if err != nil {
				return
			}
		case "State_zid02_str":
			found28zgensym_e3caedb3b7ec15ca_29[2] = true
			z.State, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ID_zid03_u64":
			found28zgensym_e3caedb3b7ec15ca_29[3] = true
			z.ID, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss28zgensym_e3caedb3b7ec15ca_29 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of NameCityStateId
var decodeMsgFieldOrder28zgensym_e3caedb3b7ec15ca_29 = []string{"Name_zid00_str", "City_zid01_str", "State_zid02_str", "ID_zid03_u64"}

var decodeMsgFieldSkip28zgensym_e3caedb3b7ec15ca_29 = []bool{false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *NameCityStateId) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 4
	}
	var fieldsInUse uint32 = 4
	isempty[0] = (len(z.Name) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.City) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.State) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (z.ID == 0) // number, omitempty
	if isempty[3] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *NameCityStateId) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3caedb3b7ec15ca_30 [4]bool
	fieldsInUse_zgensym_e3caedb3b7ec15ca_31 := z.fieldsNotEmpty(empty_zgensym_e3caedb3b7ec15ca_30[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3caedb3b7ec15ca_31 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'NameCityStateId'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x4e, 0x61, 0x6d, 0x65, 0x43, 0x69, 0x74, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x49, 0x64})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3caedb3b7ec15ca_30[0] {
		// write "Name_zid00_str"
		err = en.Append(0xae, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Name)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_30[1] {
		// write "City_zid01_str"
		err = en.Append(0xae, 0x43, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.City)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_30[2] {
		// write "State_zid02_str"
		err = en.Append(0xaf, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.State)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_30[3] {
		// write "ID_zid03_u64"
		err = en.Append(0xac, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ID)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *NameCityStateId) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [4]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Name_zid00_str"
		o = append(o, 0xae, 0x4e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Name)
	}

	if !empty[1] {
		// string "City_zid01_str"
		o = append(o, 0xae, 0x43, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.City)
	}

	if !empty[2] {
		// string "State_zid02_str"
		o = append(o, 0xaf, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.State)
	}

	if !empty[3] {
		// string "ID_zid03_u64"
		o = append(o, 0xac, 0x49, 0x44, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.ID)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *NameCityStateId) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *NameCityStateId) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields32zgensym_e3caedb3b7ec15ca_33 = 4

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields32zgensym_e3caedb3b7ec15ca_33 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields32zgensym_e3caedb3b7ec15ca_33, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft32zgensym_e3caedb3b7ec15ca_33 := totalEncodedFields32zgensym_e3caedb3b7ec15ca_33
	missingFieldsLeft32zgensym_e3caedb3b7ec15ca_33 := maxFields32zgensym_e3caedb3b7ec15ca_33 - totalEncodedFields32zgensym_e3caedb3b7ec15ca_33

	var nextMiss32zgensym_e3caedb3b7ec15ca_33 int32 = -1
	var found32zgensym_e3caedb3b7ec15ca_33 [maxFields32zgensym_e3caedb3b7ec15ca_33]bool
	var curField32zgensym_e3caedb3b7ec15ca_33 string

doneWithStruct32zgensym_e3caedb3b7ec15ca_33:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft32zgensym_e3caedb3b7ec15ca_33 > 0 || missingFieldsLeft32zgensym_e3caedb3b7ec15ca_33 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft32zgensym_e3caedb3b7ec15ca_33, missingFieldsLeft32zgensym_e3caedb3b7ec15ca_33, msgp.ShowFound(found32zgensym_e3caedb3b7ec15ca_33[:]), unmarshalMsgFieldOrder32zgensym_e3caedb3b7ec15ca_33)
		if encodedFieldsLeft32zgensym_e3caedb3b7ec15ca_33 > 0 {
			encodedFieldsLeft32zgensym_e3caedb3b7ec15ca_33--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField32zgensym_e3caedb3b7ec15ca_33 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss32zgensym_e3caedb3b7ec15ca_33 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss32zgensym_e3caedb3b7ec15ca_33 = 0
			}
			for nextMiss32zgensym_e3caedb3b7ec15ca_33 < maxFields32zgensym_e3caedb3b7ec15ca_33 && (found32zgensym_e3caedb3b7ec15ca_33[nextMiss32zgensym_e3caedb3b7ec15ca_33] || unmarshalMsgFieldSkip32zgensym_e3caedb3b7ec15ca_33[nextMiss32zgensym_e3caedb3b7ec15ca_33]) {
				nextMiss32zgensym_e3caedb3b7ec15ca_33++
			}
			if nextMiss32zgensym_e3caedb3b7ec15ca_33 == maxFields32zgensym_e3caedb3b7ec15ca_33 {
				// filled all the empty fields!
				break doneWithStruct32zgensym_e3caedb3b7ec15ca_33
			}
			missingFieldsLeft32zgensym_e3caedb3b7ec15ca_33--
			curField32zgensym_e3caedb3b7ec15ca_33 = unmarshalMsgFieldOrder32zgensym_e3caedb3b7ec15ca_33[nextMiss32zgensym_e3caedb3b7ec15ca_33]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField32zgensym_e3caedb3b7ec15ca_33)
		switch curField32zgensym_e3caedb3b7ec15ca_33 {
		// -- templateUnmarshalMsg ends here --

		case "Name_zid00_str":
			found32zgensym_e3caedb3b7ec15ca_33[0] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "City_zid01_str":
			found32zgensym_e3caedb3b7ec15ca_33[1] = true
			z.City, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "State_zid02_str":
			found32zgensym_e3caedb3b7ec15ca_33[2] = true
			z.State, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ID_zid03_u64":
			found32zgensym_e3caedb3b7ec15ca_33[3] = true
			z.ID, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss32zgensym_e3caedb3b7ec15ca_33 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of NameCityStateId
var unmarshalMsgFieldOrder32zgensym_e3caedb3b7ec15ca_33 = []string{"Name_zid00_str", "City_zid01_str", "State_zid02_str", "ID_zid03_u64"}

var unmarshalMsgFieldSkip32zgensym_e3caedb3b7ec15ca_33 = []bool{false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *NameCityStateId) Msgsize() (s int) {
	s = 1 + 15 + msgp.StringPrefixSize + len(z.Name) + 15 + msgp.StringPrefixSize + len(z.City) + 16 + msgp.StringPrefixSize + len(z.State) + 13 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *Person) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields34zgensym_e3caedb3b7ec15ca_35 = 8

	// -- templateDecodeMsg starts here--
	var totalEncodedFields34zgensym_e3caedb3b7ec15ca_35 uint32
	totalEncodedFields34zgensym_e3caedb3b7ec15ca_35, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft34zgensym_e3caedb3b7ec15ca_35 := totalEncodedFields34zgensym_e3caedb3b7ec15ca_35
	missingFieldsLeft34zgensym_e3caedb3b7ec15ca_35 := maxFields34zgensym_e3caedb3b7ec15ca_35 - totalEncodedFields34zgensym_e3caedb3b7ec15ca_35

	var nextMiss34zgensym_e3caedb3b7ec15ca_35 int32 = -1
	var found34zgensym_e3caedb3b7ec15ca_35 [maxFields34zgensym_e3caedb3b7ec15ca_35]bool
	var curField34zgensym_e3caedb3b7ec15ca_35 string

doneWithStruct34zgensym_e3caedb3b7ec15ca_35:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft34zgensym_e3caedb3b7ec15ca_35 > 0 || missingFieldsLeft34zgensym_e3caedb3b7ec15ca_35 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft34zgensym_e3caedb3b7ec15ca_35, missingFieldsLeft34zgensym_e3caedb3b7ec15ca_35, msgp.ShowFound(found34zgensym_e3caedb3b7ec15ca_35[:]), decodeMsgFieldOrder34zgensym_e3caedb3b7ec15ca_35)
		if encodedFieldsLeft34zgensym_e3caedb3b7ec15ca_35 > 0 {
			encodedFieldsLeft34zgensym_e3caedb3b7ec15ca_35--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField34zgensym_e3caedb3b7ec15ca_35 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss34zgensym_e3caedb3b7ec15ca_35 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss34zgensym_e3caedb3b7ec15ca_35 = 0
			}
			for nextMiss34zgensym_e3caedb3b7ec15ca_35 < maxFields34zgensym_e3caedb3b7ec15ca_35 && (found34zgensym_e3caedb3b7ec15ca_35[nextMiss34zgensym_e3caedb3b7ec15ca_35] || decodeMsgFieldSkip34zgensym_e3caedb3b7ec15ca_35[nextMiss34zgensym_e3caedb3b7ec15ca_35]) {
				nextMiss34zgensym_e3caedb3b7ec15ca_35++
			}
			if nextMiss34zgensym_e3caedb3b7ec15ca_35 == maxFields34zgensym_e3caedb3b7ec15ca_35 {
				// filled all the empty fields!
				break doneWithStruct34zgensym_e3caedb3b7ec15ca_35
			}
			missingFieldsLeft34zgensym_e3caedb3b7ec15ca_35--
			curField34zgensym_e3caedb3b7ec15ca_35 = decodeMsgFieldOrder34zgensym_e3caedb3b7ec15ca_35[nextMiss34zgensym_e3caedb3b7ec15ca_35]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField34zgensym_e3caedb3b7ec15ca_35)
		switch curField34zgensym_e3caedb3b7ec15ca_35 {
		// -- templateDecodeMsg ends here --

		case "id_zid00_u64":
			found34zgensym_e3caedb3b7ec15ca_35[0] = true
			z.ID, err = dc.ReadUint64()
			if err != nil {
				return
			}
		case "name_zid01_str":
			found34zgensym_e3caedb3b7ec15ca_35[1] = true
			z.Name, err = dc.ReadString()
			if err != nil {
				return
			}
		case "emailAddress_zid02_str":
			found34zgensym_e3caedb3b7ec15ca_35[2] = true
			z.EmailAddress, err = dc.ReadString()
			if err != nil {
				return
			}
		case "creditCard_zid03_str":
			found34zgensym_e3caedb3b7ec15ca_35[3] = true
			z.CreditCard, err = dc.ReadString()
			if err != nil {
				return
			}
		case "city_zid04_str":
			found34zgensym_e3caedb3b7ec15ca_35[4] = true
			z.City, err = dc.ReadString()
			if err != nil {
				return
			}
		case "state_zid05_str":
			found34zgensym_e3caedb3b7ec15ca_35[5] = true
			z.State, err = dc.ReadString()
			if err != nil {
				return
			}
		case "dateTime_zid06_i64":
			found34zgensym_e3caedb3b7ec15ca_35[6] = true
			z.DateTime, err = dc.ReadInt64()
			if err != nil {
				return
			}
		case "extra_zid07_str":
			found34zgensym_e3caedb3b7ec15ca_35[7] = true
			z.Extra, err = dc.ReadString()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss34zgensym_e3caedb3b7ec15ca_35 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Person
var decodeMsgFieldOrder34zgensym_e3caedb3b7ec15ca_35 = []string{"id_zid00_u64", "name_zid01_str", "emailAddress_zid02_str", "creditCard_zid03_str", "city_zid04_str", "state_zid05_str", "dateTime_zid06_i64", "extra_zid07_str"}

var decodeMsgFieldSkip34zgensym_e3caedb3b7ec15ca_35 = []bool{false, false, false, false, false, false, false, false}

// fieldsNotEmpty supports omitempty tags
func (z *Person) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 8
	}
	var fieldsInUse uint32 = 8
	isempty[0] = (z.ID == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (len(z.Name) == 0) // string, omitempty
	if isempty[1] {
		fieldsInUse--
	}
	isempty[2] = (len(z.EmailAddress) == 0) // string, omitempty
	if isempty[2] {
		fieldsInUse--
	}
	isempty[3] = (len(z.CreditCard) == 0) // string, omitempty
	if isempty[3] {
		fieldsInUse--
	}
	isempty[4] = (len(z.City) == 0) // string, omitempty
	if isempty[4] {
		fieldsInUse--
	}
	isempty[5] = (len(z.State) == 0) // string, omitempty
	if isempty[5] {
		fieldsInUse--
	}
	isempty[6] = (z.DateTime == 0) // number, omitempty
	if isempty[6] {
		fieldsInUse--
	}
	isempty[7] = (len(z.Extra) == 0) // string, omitempty
	if isempty[7] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z *Person) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_e3caedb3b7ec15ca_36 [8]bool
	fieldsInUse_zgensym_e3caedb3b7ec15ca_37 := z.fieldsNotEmpty(empty_zgensym_e3caedb3b7ec15ca_36[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_e3caedb3b7ec15ca_37 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'Person'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[0] {
		// write "id_zid00_u64"
		err = en.Append(0xac, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.ID)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[1] {
		// write "name_zid01_str"
		err = en.Append(0xae, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Name)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[2] {
		// write "emailAddress_zid02_str"
		err = en.Append(0xb6, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.EmailAddress)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[3] {
		// write "creditCard_zid03_str"
		err = en.Append(0xb4, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.CreditCard)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[4] {
		// write "city_zid04_str"
		err = en.Append(0xae, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.City)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[5] {
		// write "state_zid05_str"
		err = en.Append(0xaf, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.State)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[6] {
		// write "dateTime_zid06_i64"
		err = en.Append(0xb2, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteInt64(z.DateTime)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_e3caedb3b7ec15ca_36[7] {
		// write "extra_zid07_str"
		err = en.Append(0xaf, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Extra)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Person) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [8]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "id_zid00_u64"
		o = append(o, 0xac, 0x69, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.ID)
	}

	if !empty[1] {
		// string "name_zid01_str"
		o = append(o, 0xae, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Name)
	}

	if !empty[2] {
		// string "emailAddress_zid02_str"
		o = append(o, 0xb6, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x32, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.EmailAddress)
	}

	if !empty[3] {
		// string "creditCard_zid03_str"
		o = append(o, 0xb4, 0x63, 0x72, 0x65, 0x64, 0x69, 0x74, 0x43, 0x61, 0x72, 0x64, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x33, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.CreditCard)
	}

	if !empty[4] {
		// string "city_zid04_str"
		o = append(o, 0xae, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x34, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.City)
	}

	if !empty[5] {
		// string "state_zid05_str"
		o = append(o, 0xaf, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x35, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.State)
	}

	if !empty[6] {
		// string "dateTime_zid06_i64"
		o = append(o, 0xb2, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x36, 0x5f, 0x69, 0x36, 0x34)
		o = msgp.AppendInt64(o, z.DateTime)
	}

	if !empty[7] {
		// string "extra_zid07_str"
		o = append(o, 0xaf, 0x65, 0x78, 0x74, 0x72, 0x61, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x37, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Extra)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Person) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *Person) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields38zgensym_e3caedb3b7ec15ca_39 = 8

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields38zgensym_e3caedb3b7ec15ca_39 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields38zgensym_e3caedb3b7ec15ca_39, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft38zgensym_e3caedb3b7ec15ca_39 := totalEncodedFields38zgensym_e3caedb3b7ec15ca_39
	missingFieldsLeft38zgensym_e3caedb3b7ec15ca_39 := maxFields38zgensym_e3caedb3b7ec15ca_39 - totalEncodedFields38zgensym_e3caedb3b7ec15ca_39

	var nextMiss38zgensym_e3caedb3b7ec15ca_39 int32 = -1
	var found38zgensym_e3caedb3b7ec15ca_39 [maxFields38zgensym_e3caedb3b7ec15ca_39]bool
	var curField38zgensym_e3caedb3b7ec15ca_39 string

doneWithStruct38zgensym_e3caedb3b7ec15ca_39:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft38zgensym_e3caedb3b7ec15ca_39 > 0 || missingFieldsLeft38zgensym_e3caedb3b7ec15ca_39 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft38zgensym_e3caedb3b7ec15ca_39, missingFieldsLeft38zgensym_e3caedb3b7ec15ca_39, msgp.ShowFound(found38zgensym_e3caedb3b7ec15ca_39[:]), unmarshalMsgFieldOrder38zgensym_e3caedb3b7ec15ca_39)
		if encodedFieldsLeft38zgensym_e3caedb3b7ec15ca_39 > 0 {
			encodedFieldsLeft38zgensym_e3caedb3b7ec15ca_39--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField38zgensym_e3caedb3b7ec15ca_39 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss38zgensym_e3caedb3b7ec15ca_39 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss38zgensym_e3caedb3b7ec15ca_39 = 0
			}
			for nextMiss38zgensym_e3caedb3b7ec15ca_39 < maxFields38zgensym_e3caedb3b7ec15ca_39 && (found38zgensym_e3caedb3b7ec15ca_39[nextMiss38zgensym_e3caedb3b7ec15ca_39] || unmarshalMsgFieldSkip38zgensym_e3caedb3b7ec15ca_39[nextMiss38zgensym_e3caedb3b7ec15ca_39]) {
				nextMiss38zgensym_e3caedb3b7ec15ca_39++
			}
			if nextMiss38zgensym_e3caedb3b7ec15ca_39 == maxFields38zgensym_e3caedb3b7ec15ca_39 {
				// filled all the empty fields!
				break doneWithStruct38zgensym_e3caedb3b7ec15ca_39
			}
			missingFieldsLeft38zgensym_e3caedb3b7ec15ca_39--
			curField38zgensym_e3caedb3b7ec15ca_39 = unmarshalMsgFieldOrder38zgensym_e3caedb3b7ec15ca_39[nextMiss38zgensym_e3caedb3b7ec15ca_39]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField38zgensym_e3caedb3b7ec15ca_39)
		switch curField38zgensym_e3caedb3b7ec15ca_39 {
		// -- templateUnmarshalMsg ends here --

		case "id_zid00_u64":
			found38zgensym_e3caedb3b7ec15ca_39[0] = true
			z.ID, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		case "name_zid01_str":
			found38zgensym_e3caedb3b7ec15ca_39[1] = true
			z.Name, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "emailAddress_zid02_str":
			found38zgensym_e3caedb3b7ec15ca_39[2] = true
			z.EmailAddress, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "creditCard_zid03_str":
			found38zgensym_e3caedb3b7ec15ca_39[3] = true
			z.CreditCard, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "city_zid04_str":
			found38zgensym_e3caedb3b7ec15ca_39[4] = true
			z.City, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "state_zid05_str":
			found38zgensym_e3caedb3b7ec15ca_39[5] = true
			z.State, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "dateTime_zid06_i64":
			found38zgensym_e3caedb3b7ec15ca_39[6] = true
			z.DateTime, bts, err = nbs.ReadInt64Bytes(bts)

			if err != nil {
				return
			}
		case "extra_zid07_str":
			found38zgensym_e3caedb3b7ec15ca_39[7] = true
			z.Extra, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss38zgensym_e3caedb3b7ec15ca_39 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of Person
var unmarshalMsgFieldOrder38zgensym_e3caedb3b7ec15ca_39 = []string{"id_zid00_u64", "name_zid01_str", "emailAddress_zid02_str", "creditCard_zid03_str", "city_zid04_str", "state_zid05_str", "dateTime_zid06_i64", "extra_zid07_str"}

var unmarshalMsgFieldSkip38zgensym_e3caedb3b7ec15ca_39 = []bool{false, false, false, false, false, false, false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Person) Msgsize() (s int) {
	s = 1 + 13 + msgp.Uint64Size + 15 + msgp.StringPrefixSize + len(z.Name) + 23 + msgp.StringPrefixSize + len(z.EmailAddress) + 21 + msgp.StringPrefixSize + len(z.CreditCard) + 15 + msgp.StringPrefixSize + len(z.City) + 16 + msgp.StringPrefixSize + len(z.State) + 19 + msgp.Int64Size + 16 + msgp.StringPrefixSize + len(z.Extra)
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SerdeFormat) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_e3caedb3b7ec15ca_40 uint8
		zgensym_e3caedb3b7ec15ca_40, err = dc.ReadUint8()
		(*z) = SerdeFormat(zgensym_e3caedb3b7ec15ca_40)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z SerdeFormat) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z SerdeFormat) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SerdeFormat) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SerdeFormat) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_e3caedb3b7ec15ca_41 uint8
		zgensym_e3caedb3b7ec15ca_41, bts, err = nbs.ReadUint8Bytes(bts)

		if err != nil {
			return
		}
		(*z) = SerdeFormat(zgensym_e3caedb3b7ec15ca_41)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SerdeFormat) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}
