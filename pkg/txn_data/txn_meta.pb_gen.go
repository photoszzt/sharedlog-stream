package txn_data

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	commtypes "sharedlog-stream/pkg/commtypes"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TopicPartition) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "topic":
			z.Topic, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Topic")
				return
			}
		case "parnum":
			z.ParNum, err = dc.ReadBytes(z.ParNum)
			if err != nil {
				err = msgp.WrapError(err, "ParNum")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TopicPartition) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.Topic == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.ParNum == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "topic"
		err = en.Append(0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
		if err != nil {
			return
		}
		err = en.WriteString(z.Topic)
		if err != nil {
			err = msgp.WrapError(err, "Topic")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "parnum"
		err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x6e, 0x75, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteBytes(z.ParNum)
		if err != nil {
			err = msgp.WrapError(err, "ParNum")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TopicPartition) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.Topic == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.ParNum == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "topic"
		o = append(o, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
		o = msgp.AppendString(o, z.Topic)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "parnum"
		o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x6e, 0x75, 0x6d)
		o = msgp.AppendBytes(o, z.ParNum)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TopicPartition) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "topic":
			z.Topic, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topic")
				return
			}
		case "parnum":
			z.ParNum, bts, err = msgp.ReadBytesBytes(bts, z.ParNum)
			if err != nil {
				err = msgp.WrapError(err, "ParNum")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TopicPartition) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Topic) + 7 + msgp.BytesPrefixSize + len(z.ParNum)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxnMetaMsg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txn_id":
			z.TransactionalId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionalId")
				return
			}
		case "prodId":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
				z.ProdId = nil
			} else {
				if z.ProdId == nil {
					z.ProdId = new(commtypes.ProdId)
				}
				err = z.ProdId.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
			}
		case "st":
			z.State, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "tps":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TopicPartitions")
				return
			}
			if cap(z.TopicPartitions) >= int(zb0002) {
				z.TopicPartitions = (z.TopicPartitions)[:zb0002]
			} else {
				z.TopicPartitions = make([]*TopicPartition, zb0002)
			}
			for za0001 := range z.TopicPartitions {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "TopicPartitions", za0001)
						return
					}
					z.TopicPartitions[za0001] = nil
				} else {
					if z.TopicPartitions[za0001] == nil {
						z.TopicPartitions[za0001] = new(TopicPartition)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "TopicPartitions", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "TopicPartitions", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "topic":
							z.TopicPartitions[za0001].Topic, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "TopicPartitions", za0001, "Topic")
								return
							}
						case "parnum":
							z.TopicPartitions[za0001].ParNum, err = dc.ReadBytes(z.TopicPartitions[za0001].ParNum)
							if err != nil {
								err = msgp.WrapError(err, "TopicPartitions", za0001, "ParNum")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "TopicPartitions", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxnMetaMsg) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.TransactionalId == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.ProdId == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.State == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.TopicPartitions == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "txn_id"
		err = en.Append(0xa6, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.TransactionalId)
		if err != nil {
			err = msgp.WrapError(err, "TransactionalId")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "prodId"
		err = en.Append(0xa6, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64)
		if err != nil {
			return
		}
		if z.ProdId == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ProdId.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ProdId")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "st"
		err = en.Append(0xa2, 0x73, 0x74)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.State)
		if err != nil {
			err = msgp.WrapError(err, "State")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "tps"
		err = en.Append(0xa3, 0x74, 0x70, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.TopicPartitions)))
		if err != nil {
			err = msgp.WrapError(err, "TopicPartitions")
			return
		}
		for za0001 := range z.TopicPartitions {
			if z.TopicPartitions[za0001] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.TopicPartitions[za0001].Topic == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.TopicPartitions[za0001].ParNum == nil {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				err = en.Append(0x80 | uint8(zb0002Len))
				if err != nil {
					return
				}
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// write "topic"
					err = en.Append(0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
					if err != nil {
						return
					}
					err = en.WriteString(z.TopicPartitions[za0001].Topic)
					if err != nil {
						err = msgp.WrapError(err, "TopicPartitions", za0001, "Topic")
						return
					}
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// write "parnum"
					err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x6e, 0x75, 0x6d)
					if err != nil {
						return
					}
					err = en.WriteBytes(z.TopicPartitions[za0001].ParNum)
					if err != nil {
						err = msgp.WrapError(err, "TopicPartitions", za0001, "ParNum")
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxnMetaMsg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.TransactionalId == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.ProdId == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.State == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.TopicPartitions == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "txn_id"
		o = append(o, 0xa6, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64)
		o = msgp.AppendString(o, z.TransactionalId)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "prodId"
		o = append(o, 0xa6, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64)
		if z.ProdId == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ProdId.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ProdId")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "st"
		o = append(o, 0xa2, 0x73, 0x74)
		o = msgp.AppendUint32(o, z.State)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "tps"
		o = append(o, 0xa3, 0x74, 0x70, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.TopicPartitions)))
		for za0001 := range z.TopicPartitions {
			if z.TopicPartitions[za0001] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.TopicPartitions[za0001].Topic == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.TopicPartitions[za0001].ParNum == nil {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				o = append(o, 0x80|uint8(zb0002Len))
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// string "topic"
					o = append(o, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
					o = msgp.AppendString(o, z.TopicPartitions[za0001].Topic)
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// string "parnum"
					o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x6e, 0x75, 0x6d)
					o = msgp.AppendBytes(o, z.TopicPartitions[za0001].ParNum)
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMetaMsg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txn_id":
			z.TransactionalId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionalId")
				return
			}
		case "prodId":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ProdId = nil
			} else {
				if z.ProdId == nil {
					z.ProdId = new(commtypes.ProdId)
				}
				bts, err = z.ProdId.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
			}
		case "st":
			z.State, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "State")
				return
			}
		case "tps":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicPartitions")
				return
			}
			if cap(z.TopicPartitions) >= int(zb0002) {
				z.TopicPartitions = (z.TopicPartitions)[:zb0002]
			} else {
				z.TopicPartitions = make([]*TopicPartition, zb0002)
			}
			for za0001 := range z.TopicPartitions {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.TopicPartitions[za0001] = nil
				} else {
					if z.TopicPartitions[za0001] == nil {
						z.TopicPartitions[za0001] = new(TopicPartition)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "TopicPartitions", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "TopicPartitions", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "topic":
							z.TopicPartitions[za0001].Topic, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "TopicPartitions", za0001, "Topic")
								return
							}
						case "parnum":
							z.TopicPartitions[za0001].ParNum, bts, err = msgp.ReadBytesBytes(bts, z.TopicPartitions[za0001].ParNum)
							if err != nil {
								err = msgp.WrapError(err, "TopicPartitions", za0001, "ParNum")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "TopicPartitions", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxnMetaMsg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.TransactionalId) + 7
	if z.ProdId == nil {
		s += msgp.NilSize
	} else {
		s += z.ProdId.Msgsize()
	}
	s += 3 + msgp.Uint32Size + 4 + msgp.ArrayHeaderSize
	for za0001 := range z.TopicPartitions {
		if z.TopicPartitions[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 6 + msgp.StringPrefixSize + len(z.TopicPartitions[za0001].Topic) + 7 + msgp.BytesPrefixSize + len(z.TopicPartitions[za0001].ParNum)
		}
	}
	return
}
