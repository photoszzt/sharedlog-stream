package epoch_data

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *EpochMeta) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConSeqNum":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ConSeqNums")
				return
			}
			if z.ConSeqNums == nil {
				z.ConSeqNums = make(map[string]uint64, zb0002)
			} else if len(z.ConSeqNums) > 0 {
				for key := range z.ConSeqNums {
					delete(z.ConSeqNums, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 uint64
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ConSeqNums")
					return
				}
				za0002, err = dc.ReadUint64()
				if err != nil {
					err = msgp.WrapError(err, "ConSeqNums", za0001)
					return
				}
				z.ConSeqNums[za0001] = za0002
			}
		case "tid":
			z.TaskId, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TaskId")
				return
			}
		case "te":
			z.TaskEpoch, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "TaskEpoch")
				return
			}
		case "mark":
			{
				var zb0003 uint8
				zb0003, err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "Mark")
					return
				}
				z.Mark = EpochMetaMark(zb0003)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EpochMeta) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.ConSeqNums == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.TaskId == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.TaskEpoch == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Mark == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "ConSeqNum"
		err = en.Append(0xa9, 0x43, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteMapHeader(uint32(len(z.ConSeqNums)))
		if err != nil {
			err = msgp.WrapError(err, "ConSeqNums")
			return
		}
		for za0001, za0002 := range z.ConSeqNums {
			err = en.WriteString(za0001)
			if err != nil {
				err = msgp.WrapError(err, "ConSeqNums")
				return
			}
			err = en.WriteUint64(za0002)
			if err != nil {
				err = msgp.WrapError(err, "ConSeqNums", za0001)
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "tid"
		err = en.Append(0xa3, 0x74, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.TaskId)
		if err != nil {
			err = msgp.WrapError(err, "TaskId")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "te"
		err = en.Append(0xa2, 0x74, 0x65)
		if err != nil {
			return
		}
		err = en.WriteUint16(z.TaskEpoch)
		if err != nil {
			err = msgp.WrapError(err, "TaskEpoch")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "mark"
		err = en.Append(0xa4, 0x6d, 0x61, 0x72, 0x6b)
		if err != nil {
			return
		}
		err = en.WriteUint8(uint8(z.Mark))
		if err != nil {
			err = msgp.WrapError(err, "Mark")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EpochMeta) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.ConSeqNums == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.TaskId == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.TaskEpoch == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.Mark == 0 {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "ConSeqNum"
		o = append(o, 0xa9, 0x43, 0x6f, 0x6e, 0x53, 0x65, 0x71, 0x4e, 0x75, 0x6d)
		o = msgp.AppendMapHeader(o, uint32(len(z.ConSeqNums)))
		for za0001, za0002 := range z.ConSeqNums {
			o = msgp.AppendString(o, za0001)
			o = msgp.AppendUint64(o, za0002)
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "tid"
		o = append(o, 0xa3, 0x74, 0x69, 0x64)
		o = msgp.AppendUint64(o, z.TaskId)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "te"
		o = append(o, 0xa2, 0x74, 0x65)
		o = msgp.AppendUint16(o, z.TaskEpoch)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "mark"
		o = append(o, 0xa4, 0x6d, 0x61, 0x72, 0x6b)
		o = msgp.AppendUint8(o, uint8(z.Mark))
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EpochMeta) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "ConSeqNum":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ConSeqNums")
				return
			}
			if z.ConSeqNums == nil {
				z.ConSeqNums = make(map[string]uint64, zb0002)
			} else if len(z.ConSeqNums) > 0 {
				for key := range z.ConSeqNums {
					delete(z.ConSeqNums, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 uint64
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConSeqNums")
					return
				}
				za0002, bts, err = msgp.ReadUint64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConSeqNums", za0001)
					return
				}
				z.ConSeqNums[za0001] = za0002
			}
		case "tid":
			z.TaskId, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TaskId")
				return
			}
		case "te":
			z.TaskEpoch, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TaskEpoch")
				return
			}
		case "mark":
			{
				var zb0003 uint8
				zb0003, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Mark")
					return
				}
				z.Mark = EpochMetaMark(zb0003)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EpochMeta) Msgsize() (s int) {
	s = 1 + 10 + msgp.MapHeaderSize
	if z.ConSeqNums != nil {
		for za0001, za0002 := range z.ConSeqNums {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.Uint64Size
		}
	}
	s += 4 + msgp.Uint64Size + 3 + msgp.Uint16Size + 5 + msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EpochMetaJSONSerde) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EpochMetaJSONSerde) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EpochMetaJSONSerde) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EpochMetaJSONSerde) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EpochMetaJSONSerde) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EpochMetaMark) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = EpochMetaMark(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EpochMetaMark) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EpochMetaMark) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EpochMetaMark) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = EpochMetaMark(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EpochMetaMark) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EpochMetaMsgpSerde) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z EpochMetaMsgpSerde) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z EpochMetaMsgpSerde) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EpochMetaMsgpSerde) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z EpochMetaMsgpSerde) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ProduceRange) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.Start, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "e":
			z.End, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ProduceRange) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "s"
	err = en.Append(0x82, 0xa1, 0x73)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "e"
	err = en.Append(0xa1, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ProduceRange) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "s"
	o = append(o, 0x82, 0xa1, 0x73)
	o = msgp.AppendUint64(o, z.Start)
	// string "e"
	o = append(o, 0xa1, 0x65)
	o = msgp.AppendUint64(o, z.End)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ProduceRange) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "s":
			z.Start, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "e":
			z.End, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ProduceRange) Msgsize() (s int) {
	s = 1 + 2 + msgp.Uint64Size + 2 + msgp.Uint64Size
	return
}
