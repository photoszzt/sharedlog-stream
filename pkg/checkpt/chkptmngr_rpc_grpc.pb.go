// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pkg/checkpt/chkptmngr_rpc.proto

package checkpt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChkptMngrClient is the client API for ChkptMngr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChkptMngrClient interface {
	Init(ctx context.Context, in *FinMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	FinishChkpt(ctx context.Context, in *FinMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReqChkmngrEndedIfNot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CheckChkptFinish(ctx context.Context, in *CheckFinMsg, opts ...grpc.CallOption) (*ChkptFinished, error)
	ChkptMngrEnded(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ended, error)
	ResetCheckpointCount(ctx context.Context, in *FinMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chkptMngrClient struct {
	cc grpc.ClientConnInterface
}

func NewChkptMngrClient(cc grpc.ClientConnInterface) ChkptMngrClient {
	return &chkptMngrClient{cc}
}

func (c *chkptMngrClient) Init(ctx context.Context, in *FinMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/checkpt.ChkptMngr/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chkptMngrClient) FinishChkpt(ctx context.Context, in *FinMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/checkpt.ChkptMngr/FinishChkpt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chkptMngrClient) ReqChkmngrEndedIfNot(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/checkpt.ChkptMngr/ReqChkmngrEndedIfNot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chkptMngrClient) CheckChkptFinish(ctx context.Context, in *CheckFinMsg, opts ...grpc.CallOption) (*ChkptFinished, error) {
	out := new(ChkptFinished)
	err := c.cc.Invoke(ctx, "/checkpt.ChkptMngr/CheckChkptFinish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chkptMngrClient) ChkptMngrEnded(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Ended, error) {
	out := new(Ended)
	err := c.cc.Invoke(ctx, "/checkpt.ChkptMngr/ChkptMngrEnded", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chkptMngrClient) ResetCheckpointCount(ctx context.Context, in *FinMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/checkpt.ChkptMngr/ResetCheckpointCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChkptMngrServer is the server API for ChkptMngr service.
// All implementations must embed UnimplementedChkptMngrServer
// for forward compatibility
type ChkptMngrServer interface {
	Init(context.Context, *FinMsg) (*emptypb.Empty, error)
	FinishChkpt(context.Context, *FinMsg) (*emptypb.Empty, error)
	ReqChkmngrEndedIfNot(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CheckChkptFinish(context.Context, *CheckFinMsg) (*ChkptFinished, error)
	ChkptMngrEnded(context.Context, *emptypb.Empty) (*Ended, error)
	ResetCheckpointCount(context.Context, *FinMsg) (*emptypb.Empty, error)
	mustEmbedUnimplementedChkptMngrServer()
}

// UnimplementedChkptMngrServer must be embedded to have forward compatible implementations.
type UnimplementedChkptMngrServer struct {
}

func (UnimplementedChkptMngrServer) Init(context.Context, *FinMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedChkptMngrServer) FinishChkpt(context.Context, *FinMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishChkpt not implemented")
}
func (UnimplementedChkptMngrServer) ReqChkmngrEndedIfNot(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReqChkmngrEndedIfNot not implemented")
}
func (UnimplementedChkptMngrServer) CheckChkptFinish(context.Context, *CheckFinMsg) (*ChkptFinished, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckChkptFinish not implemented")
}
func (UnimplementedChkptMngrServer) ChkptMngrEnded(context.Context, *emptypb.Empty) (*Ended, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChkptMngrEnded not implemented")
}
func (UnimplementedChkptMngrServer) ResetCheckpointCount(context.Context, *FinMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetCheckpointCount not implemented")
}
func (UnimplementedChkptMngrServer) mustEmbedUnimplementedChkptMngrServer() {}

// UnsafeChkptMngrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChkptMngrServer will
// result in compilation errors.
type UnsafeChkptMngrServer interface {
	mustEmbedUnimplementedChkptMngrServer()
}

func RegisterChkptMngrServer(s grpc.ServiceRegistrar, srv ChkptMngrServer) {
	s.RegisterService(&ChkptMngr_ServiceDesc, srv)
}

func _ChkptMngr_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChkptMngrServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpt.ChkptMngr/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChkptMngrServer).Init(ctx, req.(*FinMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChkptMngr_FinishChkpt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChkptMngrServer).FinishChkpt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpt.ChkptMngr/FinishChkpt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChkptMngrServer).FinishChkpt(ctx, req.(*FinMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChkptMngr_ReqChkmngrEndedIfNot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChkptMngrServer).ReqChkmngrEndedIfNot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpt.ChkptMngr/ReqChkmngrEndedIfNot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChkptMngrServer).ReqChkmngrEndedIfNot(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChkptMngr_CheckChkptFinish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckFinMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChkptMngrServer).CheckChkptFinish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpt.ChkptMngr/CheckChkptFinish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChkptMngrServer).CheckChkptFinish(ctx, req.(*CheckFinMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChkptMngr_ChkptMngrEnded_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChkptMngrServer).ChkptMngrEnded(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpt.ChkptMngr/ChkptMngrEnded",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChkptMngrServer).ChkptMngrEnded(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChkptMngr_ResetCheckpointCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChkptMngrServer).ResetCheckpointCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checkpt.ChkptMngr/ResetCheckpointCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChkptMngrServer).ResetCheckpointCount(ctx, req.(*FinMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// ChkptMngr_ServiceDesc is the grpc.ServiceDesc for ChkptMngr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChkptMngr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "checkpt.ChkptMngr",
	HandlerType: (*ChkptMngrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _ChkptMngr_Init_Handler,
		},
		{
			MethodName: "FinishChkpt",
			Handler:    _ChkptMngr_FinishChkpt_Handler,
		},
		{
			MethodName: "ReqChkmngrEndedIfNot",
			Handler:    _ChkptMngr_ReqChkmngrEndedIfNot_Handler,
		},
		{
			MethodName: "CheckChkptFinish",
			Handler:    _ChkptMngr_CheckChkptFinish_Handler,
		},
		{
			MethodName: "ChkptMngrEnded",
			Handler:    _ChkptMngr_ChkptMngrEnded_Handler,
		},
		{
			MethodName: "ResetCheckpointCount",
			Handler:    _ChkptMngr_ResetCheckpointCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/checkpt/chkptmngr_rpc.proto",
}
