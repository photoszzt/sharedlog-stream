package remote_txn_rpc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	txn_data "sharedlog-stream/pkg/txn_data"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *RTxnArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "rpcType":
			{
				var zb0002 uint8
				zb0002, err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "RpcType")
					return
				}
				z.RpcType = RTxnRpcType(zb0002)
			}
		case "serdeFormat":
			err = z.SerdeFormat.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "SerdeFormat")
				return
			}
		case "initArg":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Init")
					return
				}
				z.Init = nil
			} else {
				if z.Init == nil {
					z.Init = new(InitArg)
				}
				err = z.Init.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Init")
					return
				}
			}
		case "txnMeta":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "MetaMsg")
					return
				}
				z.MetaMsg = nil
			} else {
				if z.MetaMsg == nil {
					z.MetaMsg = new(txn_data.TxnMetaMsg)
				}
				err = z.MetaMsg.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "MetaMsg")
					return
				}
			}
		case "cOff":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ConsumedOff")
					return
				}
				z.ConsumedOff = nil
			} else {
				if z.ConsumedOff == nil {
					z.ConsumedOff = new(ConsumedOffsets)
				}
				err = z.ConsumedOff.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ConsumedOff")
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *RTxnArg) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Init == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.MetaMsg == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.ConsumedOff == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	// write "rpcType"
	err = en.Append(0xa7, 0x72, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint8(uint8(z.RpcType))
	if err != nil {
		err = msgp.WrapError(err, "RpcType")
		return
	}
	// write "serdeFormat"
	err = en.Append(0xab, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	if err != nil {
		return
	}
	err = z.SerdeFormat.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "SerdeFormat")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "initArg"
		err = en.Append(0xa7, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x72, 0x67)
		if err != nil {
			return
		}
		if z.Init == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Init.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Init")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "txnMeta"
		err = en.Append(0xa7, 0x74, 0x78, 0x6e, 0x4d, 0x65, 0x74, 0x61)
		if err != nil {
			return
		}
		if z.MetaMsg == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.MetaMsg.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "MetaMsg")
				return
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "cOff"
		err = en.Append(0xa4, 0x63, 0x4f, 0x66, 0x66)
		if err != nil {
			return
		}
		if z.ConsumedOff == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ConsumedOff.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ConsumedOff")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *RTxnArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(5)
	var zb0001Mask uint8 /* 5 bits */
	_ = zb0001Mask
	if z.Init == nil {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.MetaMsg == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.ConsumedOff == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	// string "rpcType"
	o = append(o, 0xa7, 0x72, 0x70, 0x63, 0x54, 0x79, 0x70, 0x65)
	o = msgp.AppendUint8(o, uint8(z.RpcType))
	// string "serdeFormat"
	o = append(o, 0xab, 0x73, 0x65, 0x72, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74)
	o, err = z.SerdeFormat.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "SerdeFormat")
		return
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "initArg"
		o = append(o, 0xa7, 0x69, 0x6e, 0x69, 0x74, 0x41, 0x72, 0x67)
		if z.Init == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Init.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Init")
				return
			}
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "txnMeta"
		o = append(o, 0xa7, 0x74, 0x78, 0x6e, 0x4d, 0x65, 0x74, 0x61)
		if z.MetaMsg == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.MetaMsg.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "MetaMsg")
				return
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "cOff"
		o = append(o, 0xa4, 0x63, 0x4f, 0x66, 0x66)
		if z.ConsumedOff == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ConsumedOff.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ConsumedOff")
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RTxnArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "rpcType":
			{
				var zb0002 uint8
				zb0002, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "RpcType")
					return
				}
				z.RpcType = RTxnRpcType(zb0002)
			}
		case "serdeFormat":
			bts, err = z.SerdeFormat.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "SerdeFormat")
				return
			}
		case "initArg":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Init = nil
			} else {
				if z.Init == nil {
					z.Init = new(InitArg)
				}
				bts, err = z.Init.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Init")
					return
				}
			}
		case "txnMeta":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.MetaMsg = nil
			} else {
				if z.MetaMsg == nil {
					z.MetaMsg = new(txn_data.TxnMetaMsg)
				}
				bts, err = z.MetaMsg.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "MetaMsg")
					return
				}
			}
		case "cOff":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ConsumedOff = nil
			} else {
				if z.ConsumedOff == nil {
					z.ConsumedOff = new(ConsumedOffsets)
				}
				bts, err = z.ConsumedOff.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ConsumedOff")
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *RTxnArg) Msgsize() (s int) {
	s = 1 + 8 + msgp.Uint8Size + 12 + z.SerdeFormat.Msgsize() + 8
	if z.Init == nil {
		s += msgp.NilSize
	} else {
		s += z.Init.Msgsize()
	}
	s += 8
	if z.MetaMsg == nil {
		s += msgp.NilSize
	} else {
		s += z.MetaMsg.Msgsize()
	}
	s += 5
	if z.ConsumedOff == nil {
		s += msgp.NilSize
	} else {
		s += z.ConsumedOff.Msgsize()
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *RTxnRpcType) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = RTxnRpcType(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z RTxnRpcType) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z RTxnRpcType) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *RTxnRpcType) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = RTxnRpcType(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z RTxnRpcType) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}
