package remote_txn_rpc

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	commtypes "sharedlog-stream/pkg/commtypes"

	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *CommitReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "logOff":
			z.LogOffset, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "LogOffset")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z CommitReply) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	if z.LogOffset == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "logOff"
		err = en.Append(0xa6, 0x6c, 0x6f, 0x67, 0x4f, 0x66, 0x66)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.LogOffset)
		if err != nil {
			err = msgp.WrapError(err, "LogOffset")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CommitReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(1)
	var zb0001Mask uint8 /* 1 bits */
	_ = zb0001Mask
	if z.LogOffset == 0 {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "logOff"
		o = append(o, 0xa6, 0x6c, 0x6f, 0x67, 0x4f, 0x66, 0x66)
		o = msgp.AppendUint64(o, z.LogOffset)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CommitReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "logOff":
			z.LogOffset, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "LogOffset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CommitReply) Msgsize() (s int) {
	s = 1 + 7 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ConsumedOffsets) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txn_id":
			z.TransactionalId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionalId")
				return
			}
		case "prodId":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
				z.ProdId = nil
			} else {
				if z.ProdId == nil {
					z.ProdId = new(commtypes.ProdId)
				}
				err = z.ProdId.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
			}
		case "parNum":
			z.ParNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "ParNum")
				return
			}
		case "offPairs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "OffsetPairs")
				return
			}
			if cap(z.OffsetPairs) >= int(zb0002) {
				z.OffsetPairs = (z.OffsetPairs)[:zb0002]
			} else {
				z.OffsetPairs = make([]*OffsetPair, zb0002)
			}
			for za0001 := range z.OffsetPairs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001)
						return
					}
					z.OffsetPairs[za0001] = nil
				} else {
					if z.OffsetPairs[za0001] == nil {
						z.OffsetPairs[za0001] = new(OffsetPair)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "OffsetPairs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpName":
							z.OffsetPairs[za0001].TopicName, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "TopicName")
								return
							}
						case "off":
							z.OffsetPairs[za0001].Offset, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "Offset")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ConsumedOffsets) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.TransactionalId == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.ProdId == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.ParNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.OffsetPairs == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "txn_id"
		err = en.Append(0xa6, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.TransactionalId)
		if err != nil {
			err = msgp.WrapError(err, "TransactionalId")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "prodId"
		err = en.Append(0xa6, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64)
		if err != nil {
			return
		}
		if z.ProdId == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ProdId.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ProdId")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "parNum"
		err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x4e, 0x75, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.ParNum)
		if err != nil {
			err = msgp.WrapError(err, "ParNum")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "offPairs"
		err = en.Append(0xa8, 0x6f, 0x66, 0x66, 0x50, 0x61, 0x69, 0x72, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.OffsetPairs)))
		if err != nil {
			err = msgp.WrapError(err, "OffsetPairs")
			return
		}
		for za0001 := range z.OffsetPairs {
			if z.OffsetPairs[za0001] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.OffsetPairs[za0001].TopicName == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.OffsetPairs[za0001].Offset == 0 {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				err = en.Append(0x80 | uint8(zb0002Len))
				if err != nil {
					return
				}
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// write "tpName"
					err = en.Append(0xa6, 0x74, 0x70, 0x4e, 0x61, 0x6d, 0x65)
					if err != nil {
						return
					}
					err = en.WriteString(z.OffsetPairs[za0001].TopicName)
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001, "TopicName")
						return
					}
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// write "off"
					err = en.Append(0xa3, 0x6f, 0x66, 0x66)
					if err != nil {
						return
					}
					err = en.WriteUint64(z.OffsetPairs[za0001].Offset)
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001, "Offset")
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ConsumedOffsets) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	_ = zb0001Mask
	if z.TransactionalId == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.ProdId == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.ParNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.OffsetPairs == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "txn_id"
		o = append(o, 0xa6, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64)
		o = msgp.AppendString(o, z.TransactionalId)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "prodId"
		o = append(o, 0xa6, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64)
		if z.ProdId == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ProdId.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ProdId")
				return
			}
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "parNum"
		o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x4e, 0x75, 0x6d)
		o = msgp.AppendUint32(o, z.ParNum)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "offPairs"
		o = append(o, 0xa8, 0x6f, 0x66, 0x66, 0x50, 0x61, 0x69, 0x72, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.OffsetPairs)))
		for za0001 := range z.OffsetPairs {
			if z.OffsetPairs[za0001] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.OffsetPairs[za0001].TopicName == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.OffsetPairs[za0001].Offset == 0 {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				o = append(o, 0x80|uint8(zb0002Len))
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// string "tpName"
					o = append(o, 0xa6, 0x74, 0x70, 0x4e, 0x61, 0x6d, 0x65)
					o = msgp.AppendString(o, z.OffsetPairs[za0001].TopicName)
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// string "off"
					o = append(o, 0xa3, 0x6f, 0x66, 0x66)
					o = msgp.AppendUint64(o, z.OffsetPairs[za0001].Offset)
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ConsumedOffsets) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txn_id":
			z.TransactionalId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionalId")
				return
			}
		case "prodId":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ProdId = nil
			} else {
				if z.ProdId == nil {
					z.ProdId = new(commtypes.ProdId)
				}
				bts, err = z.ProdId.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
			}
		case "parNum":
			z.ParNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParNum")
				return
			}
		case "offPairs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffsetPairs")
				return
			}
			if cap(z.OffsetPairs) >= int(zb0002) {
				z.OffsetPairs = (z.OffsetPairs)[:zb0002]
			} else {
				z.OffsetPairs = make([]*OffsetPair, zb0002)
			}
			for za0001 := range z.OffsetPairs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.OffsetPairs[za0001] = nil
				} else {
					if z.OffsetPairs[za0001] == nil {
						z.OffsetPairs[za0001] = new(OffsetPair)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "OffsetPairs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpName":
							z.OffsetPairs[za0001].TopicName, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "TopicName")
								return
							}
						case "off":
							z.OffsetPairs[za0001].Offset, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "Offset")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ConsumedOffsets) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.TransactionalId) + 7
	if z.ProdId == nil {
		s += msgp.NilSize
	} else {
		s += z.ProdId.Msgsize()
	}
	s += 7 + msgp.Uint32Size + 9 + msgp.ArrayHeaderSize
	for za0001 := range z.OffsetPairs {
		if z.OffsetPairs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 7 + msgp.StringPrefixSize + len(z.OffsetPairs[za0001].TopicName) + 4 + msgp.Uint64Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InitArg) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txn_id":
			z.TransactionalId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TransactionalId")
				return
			}
		case "substreamNum":
			z.SubstreamNum, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "SubstreamNum")
				return
			}
		case "bufMax":
			z.BufMaxSize, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "BufMaxSize")
				return
			}
		case "inInfo":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "InputStreamInfos")
				return
			}
			if cap(z.InputStreamInfos) >= int(zb0002) {
				z.InputStreamInfos = (z.InputStreamInfos)[:zb0002]
			} else {
				z.InputStreamInfos = make([]*StreamInfo, zb0002)
			}
			for za0001 := range z.InputStreamInfos {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "InputStreamInfos", za0001)
						return
					}
					z.InputStreamInfos[za0001] = nil
				} else {
					if z.InputStreamInfos[za0001] == nil {
						z.InputStreamInfos[za0001] = new(StreamInfo)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "InputStreamInfos", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "InputStreamInfos", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.InputStreamInfos[za0001].TopicName, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "InputStreamInfos", za0001, "TopicName")
								return
							}
						case "numPar":
							z.InputStreamInfos[za0001].NumPartition, err = dc.ReadUint32()
							if err != nil {
								err = msgp.WrapError(err, "InputStreamInfos", za0001, "NumPartition")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "InputStreamInfos", za0001)
								return
							}
						}
					}
				}
			}
		case "outInfo":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "OutputStreamInfos")
				return
			}
			if cap(z.OutputStreamInfos) >= int(zb0004) {
				z.OutputStreamInfos = (z.OutputStreamInfos)[:zb0004]
			} else {
				z.OutputStreamInfos = make([]*StreamInfo, zb0004)
			}
			for za0002 := range z.OutputStreamInfos {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "OutputStreamInfos", za0002)
						return
					}
					z.OutputStreamInfos[za0002] = nil
				} else {
					if z.OutputStreamInfos[za0002] == nil {
						z.OutputStreamInfos[za0002] = new(StreamInfo)
					}
					var zb0005 uint32
					zb0005, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "OutputStreamInfos", za0002)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "OutputStreamInfos", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.OutputStreamInfos[za0002].TopicName, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "OutputStreamInfos", za0002, "TopicName")
								return
							}
						case "numPar":
							z.OutputStreamInfos[za0002].NumPartition, err = dc.ReadUint32()
							if err != nil {
								err = msgp.WrapError(err, "OutputStreamInfos", za0002, "NumPartition")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "OutputStreamInfos", za0002)
								return
							}
						}
					}
				}
			}
		case "kvcInfo":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "KVChangelogInfos")
				return
			}
			if cap(z.KVChangelogInfos) >= int(zb0006) {
				z.KVChangelogInfos = (z.KVChangelogInfos)[:zb0006]
			} else {
				z.KVChangelogInfos = make([]*StreamInfo, zb0006)
			}
			for za0003 := range z.KVChangelogInfos {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "KVChangelogInfos", za0003)
						return
					}
					z.KVChangelogInfos[za0003] = nil
				} else {
					if z.KVChangelogInfos[za0003] == nil {
						z.KVChangelogInfos[za0003] = new(StreamInfo)
					}
					var zb0007 uint32
					zb0007, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "KVChangelogInfos", za0003)
						return
					}
					for zb0007 > 0 {
						zb0007--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "KVChangelogInfos", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.KVChangelogInfos[za0003].TopicName, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "KVChangelogInfos", za0003, "TopicName")
								return
							}
						case "numPar":
							z.KVChangelogInfos[za0003].NumPartition, err = dc.ReadUint32()
							if err != nil {
								err = msgp.WrapError(err, "KVChangelogInfos", za0003, "NumPartition")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "KVChangelogInfos", za0003)
								return
							}
						}
					}
				}
			}
		case "wcInfo":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "WinChangelogInfos")
				return
			}
			if cap(z.WinChangelogInfos) >= int(zb0008) {
				z.WinChangelogInfos = (z.WinChangelogInfos)[:zb0008]
			} else {
				z.WinChangelogInfos = make([]*StreamInfo, zb0008)
			}
			for za0004 := range z.WinChangelogInfos {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "WinChangelogInfos", za0004)
						return
					}
					z.WinChangelogInfos[za0004] = nil
				} else {
					if z.WinChangelogInfos[za0004] == nil {
						z.WinChangelogInfos[za0004] = new(StreamInfo)
					}
					var zb0009 uint32
					zb0009, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "WinChangelogInfos", za0004)
						return
					}
					for zb0009 > 0 {
						zb0009--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "WinChangelogInfos", za0004)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.WinChangelogInfos[za0004].TopicName, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "WinChangelogInfos", za0004, "TopicName")
								return
							}
						case "numPar":
							z.WinChangelogInfos[za0004].NumPartition, err = dc.ReadUint32()
							if err != nil {
								err = msgp.WrapError(err, "WinChangelogInfos", za0004, "NumPartition")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "WinChangelogInfos", za0004)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InitArg) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	_ = zb0001Mask
	if z.TransactionalId == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SubstreamNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.BufMaxSize == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.InputStreamInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.OutputStreamInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.KVChangelogInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.WinChangelogInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "txn_id"
		err = en.Append(0xa6, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteString(z.TransactionalId)
		if err != nil {
			err = msgp.WrapError(err, "TransactionalId")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "substreamNum"
		err = en.Append(0xac, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.SubstreamNum)
		if err != nil {
			err = msgp.WrapError(err, "SubstreamNum")
			return
		}
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// write "bufMax"
		err = en.Append(0xa6, 0x62, 0x75, 0x66, 0x4d, 0x61, 0x78)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.BufMaxSize)
		if err != nil {
			err = msgp.WrapError(err, "BufMaxSize")
			return
		}
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// write "inInfo"
		err = en.Append(0xa6, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.InputStreamInfos)))
		if err != nil {
			err = msgp.WrapError(err, "InputStreamInfos")
			return
		}
		for za0001 := range z.InputStreamInfos {
			if z.InputStreamInfos[za0001] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.InputStreamInfos[za0001].TopicName == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.InputStreamInfos[za0001].NumPartition == 0 {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				err = en.Append(0x80 | uint8(zb0002Len))
				if err != nil {
					return
				}
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// write "tpN"
					err = en.Append(0xa3, 0x74, 0x70, 0x4e)
					if err != nil {
						return
					}
					err = en.WriteString(z.InputStreamInfos[za0001].TopicName)
					if err != nil {
						err = msgp.WrapError(err, "InputStreamInfos", za0001, "TopicName")
						return
					}
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// write "numPar"
					err = en.Append(0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					if err != nil {
						return
					}
					err = en.WriteUint32(z.InputStreamInfos[za0001].NumPartition)
					if err != nil {
						err = msgp.WrapError(err, "InputStreamInfos", za0001, "NumPartition")
						return
					}
				}
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// write "outInfo"
		err = en.Append(0xa7, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.OutputStreamInfos)))
		if err != nil {
			err = msgp.WrapError(err, "OutputStreamInfos")
			return
		}
		for za0002 := range z.OutputStreamInfos {
			if z.OutputStreamInfos[za0002] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0003Len := uint32(2)
				var zb0003Mask uint8 /* 2 bits */
				_ = zb0003Mask
				if z.OutputStreamInfos[za0002].TopicName == "" {
					zb0003Len--
					zb0003Mask |= 0x1
				}
				if z.OutputStreamInfos[za0002].NumPartition == 0 {
					zb0003Len--
					zb0003Mask |= 0x2
				}
				// variable map header, size zb0003Len
				err = en.Append(0x80 | uint8(zb0003Len))
				if err != nil {
					return
				}
				if (zb0003Mask & 0x1) == 0 { // if not empty
					// write "tpN"
					err = en.Append(0xa3, 0x74, 0x70, 0x4e)
					if err != nil {
						return
					}
					err = en.WriteString(z.OutputStreamInfos[za0002].TopicName)
					if err != nil {
						err = msgp.WrapError(err, "OutputStreamInfos", za0002, "TopicName")
						return
					}
				}
				if (zb0003Mask & 0x2) == 0 { // if not empty
					// write "numPar"
					err = en.Append(0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					if err != nil {
						return
					}
					err = en.WriteUint32(z.OutputStreamInfos[za0002].NumPartition)
					if err != nil {
						err = msgp.WrapError(err, "OutputStreamInfos", za0002, "NumPartition")
						return
					}
				}
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// write "kvcInfo"
		err = en.Append(0xa7, 0x6b, 0x76, 0x63, 0x49, 0x6e, 0x66, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.KVChangelogInfos)))
		if err != nil {
			err = msgp.WrapError(err, "KVChangelogInfos")
			return
		}
		for za0003 := range z.KVChangelogInfos {
			if z.KVChangelogInfos[za0003] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0004Len := uint32(2)
				var zb0004Mask uint8 /* 2 bits */
				_ = zb0004Mask
				if z.KVChangelogInfos[za0003].TopicName == "" {
					zb0004Len--
					zb0004Mask |= 0x1
				}
				if z.KVChangelogInfos[za0003].NumPartition == 0 {
					zb0004Len--
					zb0004Mask |= 0x2
				}
				// variable map header, size zb0004Len
				err = en.Append(0x80 | uint8(zb0004Len))
				if err != nil {
					return
				}
				if (zb0004Mask & 0x1) == 0 { // if not empty
					// write "tpN"
					err = en.Append(0xa3, 0x74, 0x70, 0x4e)
					if err != nil {
						return
					}
					err = en.WriteString(z.KVChangelogInfos[za0003].TopicName)
					if err != nil {
						err = msgp.WrapError(err, "KVChangelogInfos", za0003, "TopicName")
						return
					}
				}
				if (zb0004Mask & 0x2) == 0 { // if not empty
					// write "numPar"
					err = en.Append(0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					if err != nil {
						return
					}
					err = en.WriteUint32(z.KVChangelogInfos[za0003].NumPartition)
					if err != nil {
						err = msgp.WrapError(err, "KVChangelogInfos", za0003, "NumPartition")
						return
					}
				}
			}
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// write "wcInfo"
		err = en.Append(0xa6, 0x77, 0x63, 0x49, 0x6e, 0x66, 0x6f)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.WinChangelogInfos)))
		if err != nil {
			err = msgp.WrapError(err, "WinChangelogInfos")
			return
		}
		for za0004 := range z.WinChangelogInfos {
			if z.WinChangelogInfos[za0004] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0005Len := uint32(2)
				var zb0005Mask uint8 /* 2 bits */
				_ = zb0005Mask
				if z.WinChangelogInfos[za0004].TopicName == "" {
					zb0005Len--
					zb0005Mask |= 0x1
				}
				if z.WinChangelogInfos[za0004].NumPartition == 0 {
					zb0005Len--
					zb0005Mask |= 0x2
				}
				// variable map header, size zb0005Len
				err = en.Append(0x80 | uint8(zb0005Len))
				if err != nil {
					return
				}
				if (zb0005Mask & 0x1) == 0 { // if not empty
					// write "tpN"
					err = en.Append(0xa3, 0x74, 0x70, 0x4e)
					if err != nil {
						return
					}
					err = en.WriteString(z.WinChangelogInfos[za0004].TopicName)
					if err != nil {
						err = msgp.WrapError(err, "WinChangelogInfos", za0004, "TopicName")
						return
					}
				}
				if (zb0005Mask & 0x2) == 0 { // if not empty
					// write "numPar"
					err = en.Append(0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					if err != nil {
						return
					}
					err = en.WriteUint32(z.WinChangelogInfos[za0004].NumPartition)
					if err != nil {
						err = msgp.WrapError(err, "WinChangelogInfos", za0004, "NumPartition")
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InitArg) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(7)
	var zb0001Mask uint8 /* 7 bits */
	_ = zb0001Mask
	if z.TransactionalId == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.SubstreamNum == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	if z.BufMaxSize == 0 {
		zb0001Len--
		zb0001Mask |= 0x4
	}
	if z.InputStreamInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x8
	}
	if z.OutputStreamInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x10
	}
	if z.KVChangelogInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x20
	}
	if z.WinChangelogInfos == nil {
		zb0001Len--
		zb0001Mask |= 0x40
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "txn_id"
		o = append(o, 0xa6, 0x74, 0x78, 0x6e, 0x5f, 0x69, 0x64)
		o = msgp.AppendString(o, z.TransactionalId)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "substreamNum"
		o = append(o, 0xac, 0x73, 0x75, 0x62, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x75, 0x6d)
		o = msgp.AppendUint32(o, z.SubstreamNum)
	}
	if (zb0001Mask & 0x4) == 0 { // if not empty
		// string "bufMax"
		o = append(o, 0xa6, 0x62, 0x75, 0x66, 0x4d, 0x61, 0x78)
		o = msgp.AppendUint32(o, z.BufMaxSize)
	}
	if (zb0001Mask & 0x8) == 0 { // if not empty
		// string "inInfo"
		o = append(o, 0xa6, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f)
		o = msgp.AppendArrayHeader(o, uint32(len(z.InputStreamInfos)))
		for za0001 := range z.InputStreamInfos {
			if z.InputStreamInfos[za0001] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.InputStreamInfos[za0001].TopicName == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.InputStreamInfos[za0001].NumPartition == 0 {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				o = append(o, 0x80|uint8(zb0002Len))
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// string "tpN"
					o = append(o, 0xa3, 0x74, 0x70, 0x4e)
					o = msgp.AppendString(o, z.InputStreamInfos[za0001].TopicName)
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// string "numPar"
					o = append(o, 0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					o = msgp.AppendUint32(o, z.InputStreamInfos[za0001].NumPartition)
				}
			}
		}
	}
	if (zb0001Mask & 0x10) == 0 { // if not empty
		// string "outInfo"
		o = append(o, 0xa7, 0x6f, 0x75, 0x74, 0x49, 0x6e, 0x66, 0x6f)
		o = msgp.AppendArrayHeader(o, uint32(len(z.OutputStreamInfos)))
		for za0002 := range z.OutputStreamInfos {
			if z.OutputStreamInfos[za0002] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0003Len := uint32(2)
				var zb0003Mask uint8 /* 2 bits */
				_ = zb0003Mask
				if z.OutputStreamInfos[za0002].TopicName == "" {
					zb0003Len--
					zb0003Mask |= 0x1
				}
				if z.OutputStreamInfos[za0002].NumPartition == 0 {
					zb0003Len--
					zb0003Mask |= 0x2
				}
				// variable map header, size zb0003Len
				o = append(o, 0x80|uint8(zb0003Len))
				if (zb0003Mask & 0x1) == 0 { // if not empty
					// string "tpN"
					o = append(o, 0xa3, 0x74, 0x70, 0x4e)
					o = msgp.AppendString(o, z.OutputStreamInfos[za0002].TopicName)
				}
				if (zb0003Mask & 0x2) == 0 { // if not empty
					// string "numPar"
					o = append(o, 0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					o = msgp.AppendUint32(o, z.OutputStreamInfos[za0002].NumPartition)
				}
			}
		}
	}
	if (zb0001Mask & 0x20) == 0 { // if not empty
		// string "kvcInfo"
		o = append(o, 0xa7, 0x6b, 0x76, 0x63, 0x49, 0x6e, 0x66, 0x6f)
		o = msgp.AppendArrayHeader(o, uint32(len(z.KVChangelogInfos)))
		for za0003 := range z.KVChangelogInfos {
			if z.KVChangelogInfos[za0003] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0004Len := uint32(2)
				var zb0004Mask uint8 /* 2 bits */
				_ = zb0004Mask
				if z.KVChangelogInfos[za0003].TopicName == "" {
					zb0004Len--
					zb0004Mask |= 0x1
				}
				if z.KVChangelogInfos[za0003].NumPartition == 0 {
					zb0004Len--
					zb0004Mask |= 0x2
				}
				// variable map header, size zb0004Len
				o = append(o, 0x80|uint8(zb0004Len))
				if (zb0004Mask & 0x1) == 0 { // if not empty
					// string "tpN"
					o = append(o, 0xa3, 0x74, 0x70, 0x4e)
					o = msgp.AppendString(o, z.KVChangelogInfos[za0003].TopicName)
				}
				if (zb0004Mask & 0x2) == 0 { // if not empty
					// string "numPar"
					o = append(o, 0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					o = msgp.AppendUint32(o, z.KVChangelogInfos[za0003].NumPartition)
				}
			}
		}
	}
	if (zb0001Mask & 0x40) == 0 { // if not empty
		// string "wcInfo"
		o = append(o, 0xa6, 0x77, 0x63, 0x49, 0x6e, 0x66, 0x6f)
		o = msgp.AppendArrayHeader(o, uint32(len(z.WinChangelogInfos)))
		for za0004 := range z.WinChangelogInfos {
			if z.WinChangelogInfos[za0004] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0005Len := uint32(2)
				var zb0005Mask uint8 /* 2 bits */
				_ = zb0005Mask
				if z.WinChangelogInfos[za0004].TopicName == "" {
					zb0005Len--
					zb0005Mask |= 0x1
				}
				if z.WinChangelogInfos[za0004].NumPartition == 0 {
					zb0005Len--
					zb0005Mask |= 0x2
				}
				// variable map header, size zb0005Len
				o = append(o, 0x80|uint8(zb0005Len))
				if (zb0005Mask & 0x1) == 0 { // if not empty
					// string "tpN"
					o = append(o, 0xa3, 0x74, 0x70, 0x4e)
					o = msgp.AppendString(o, z.WinChangelogInfos[za0004].TopicName)
				}
				if (zb0005Mask & 0x2) == 0 { // if not empty
					// string "numPar"
					o = append(o, 0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
					o = msgp.AppendUint32(o, z.WinChangelogInfos[za0004].NumPartition)
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InitArg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "txn_id":
			z.TransactionalId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TransactionalId")
				return
			}
		case "substreamNum":
			z.SubstreamNum, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "SubstreamNum")
				return
			}
		case "bufMax":
			z.BufMaxSize, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "BufMaxSize")
				return
			}
		case "inInfo":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "InputStreamInfos")
				return
			}
			if cap(z.InputStreamInfos) >= int(zb0002) {
				z.InputStreamInfos = (z.InputStreamInfos)[:zb0002]
			} else {
				z.InputStreamInfos = make([]*StreamInfo, zb0002)
			}
			for za0001 := range z.InputStreamInfos {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.InputStreamInfos[za0001] = nil
				} else {
					if z.InputStreamInfos[za0001] == nil {
						z.InputStreamInfos[za0001] = new(StreamInfo)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "InputStreamInfos", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "InputStreamInfos", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.InputStreamInfos[za0001].TopicName, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "InputStreamInfos", za0001, "TopicName")
								return
							}
						case "numPar":
							z.InputStreamInfos[za0001].NumPartition, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "InputStreamInfos", za0001, "NumPartition")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "InputStreamInfos", za0001)
								return
							}
						}
					}
				}
			}
		case "outInfo":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OutputStreamInfos")
				return
			}
			if cap(z.OutputStreamInfos) >= int(zb0004) {
				z.OutputStreamInfos = (z.OutputStreamInfos)[:zb0004]
			} else {
				z.OutputStreamInfos = make([]*StreamInfo, zb0004)
			}
			for za0002 := range z.OutputStreamInfos {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.OutputStreamInfos[za0002] = nil
				} else {
					if z.OutputStreamInfos[za0002] == nil {
						z.OutputStreamInfos[za0002] = new(StreamInfo)
					}
					var zb0005 uint32
					zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OutputStreamInfos", za0002)
						return
					}
					for zb0005 > 0 {
						zb0005--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "OutputStreamInfos", za0002)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.OutputStreamInfos[za0002].TopicName, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OutputStreamInfos", za0002, "TopicName")
								return
							}
						case "numPar":
							z.OutputStreamInfos[za0002].NumPartition, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OutputStreamInfos", za0002, "NumPartition")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "OutputStreamInfos", za0002)
								return
							}
						}
					}
				}
			}
		case "kvcInfo":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "KVChangelogInfos")
				return
			}
			if cap(z.KVChangelogInfos) >= int(zb0006) {
				z.KVChangelogInfos = (z.KVChangelogInfos)[:zb0006]
			} else {
				z.KVChangelogInfos = make([]*StreamInfo, zb0006)
			}
			for za0003 := range z.KVChangelogInfos {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.KVChangelogInfos[za0003] = nil
				} else {
					if z.KVChangelogInfos[za0003] == nil {
						z.KVChangelogInfos[za0003] = new(StreamInfo)
					}
					var zb0007 uint32
					zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "KVChangelogInfos", za0003)
						return
					}
					for zb0007 > 0 {
						zb0007--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "KVChangelogInfos", za0003)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.KVChangelogInfos[za0003].TopicName, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "KVChangelogInfos", za0003, "TopicName")
								return
							}
						case "numPar":
							z.KVChangelogInfos[za0003].NumPartition, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "KVChangelogInfos", za0003, "NumPartition")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "KVChangelogInfos", za0003)
								return
							}
						}
					}
				}
			}
		case "wcInfo":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "WinChangelogInfos")
				return
			}
			if cap(z.WinChangelogInfos) >= int(zb0008) {
				z.WinChangelogInfos = (z.WinChangelogInfos)[:zb0008]
			} else {
				z.WinChangelogInfos = make([]*StreamInfo, zb0008)
			}
			for za0004 := range z.WinChangelogInfos {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.WinChangelogInfos[za0004] = nil
				} else {
					if z.WinChangelogInfos[za0004] == nil {
						z.WinChangelogInfos[za0004] = new(StreamInfo)
					}
					var zb0009 uint32
					zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "WinChangelogInfos", za0004)
						return
					}
					for zb0009 > 0 {
						zb0009--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "WinChangelogInfos", za0004)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpN":
							z.WinChangelogInfos[za0004].TopicName, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "WinChangelogInfos", za0004, "TopicName")
								return
							}
						case "numPar":
							z.WinChangelogInfos[za0004].NumPartition, bts, err = msgp.ReadUint32Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "WinChangelogInfos", za0004, "NumPartition")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "WinChangelogInfos", za0004)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InitArg) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.TransactionalId) + 13 + msgp.Uint32Size + 7 + msgp.Uint32Size + 7 + msgp.ArrayHeaderSize
	for za0001 := range z.InputStreamInfos {
		if z.InputStreamInfos[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.StringPrefixSize + len(z.InputStreamInfos[za0001].TopicName) + 7 + msgp.Uint32Size
		}
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0002 := range z.OutputStreamInfos {
		if z.OutputStreamInfos[za0002] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.StringPrefixSize + len(z.OutputStreamInfos[za0002].TopicName) + 7 + msgp.Uint32Size
		}
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0003 := range z.KVChangelogInfos {
		if z.KVChangelogInfos[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.StringPrefixSize + len(z.KVChangelogInfos[za0003].TopicName) + 7 + msgp.Uint32Size
		}
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0004 := range z.WinChangelogInfos {
		if z.WinChangelogInfos[za0004] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 4 + msgp.StringPrefixSize + len(z.WinChangelogInfos[za0004].TopicName) + 7 + msgp.Uint32Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *InitReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "prodId":
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
				z.ProdId = nil
			} else {
				if z.ProdId == nil {
					z.ProdId = new(commtypes.ProdId)
				}
				err = z.ProdId.DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
			}
		case "offPairs":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "OffsetPairs")
				return
			}
			if cap(z.OffsetPairs) >= int(zb0002) {
				z.OffsetPairs = (z.OffsetPairs)[:zb0002]
			} else {
				z.OffsetPairs = make([]*OffsetPair, zb0002)
			}
			for za0001 := range z.OffsetPairs {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001)
						return
					}
					z.OffsetPairs[za0001] = nil
				} else {
					if z.OffsetPairs[za0001] == nil {
						z.OffsetPairs[za0001] = new(OffsetPair)
					}
					var zb0003 uint32
					zb0003, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "OffsetPairs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpName":
							z.OffsetPairs[za0001].TopicName, err = dc.ReadString()
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "TopicName")
								return
							}
						case "off":
							z.OffsetPairs[za0001].Offset, err = dc.ReadUint64()
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "Offset")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *InitReply) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.ProdId == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.OffsetPairs == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "prodId"
		err = en.Append(0xa6, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64)
		if err != nil {
			return
		}
		if z.ProdId == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.ProdId.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "ProdId")
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "offPairs"
		err = en.Append(0xa8, 0x6f, 0x66, 0x66, 0x50, 0x61, 0x69, 0x72, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.OffsetPairs)))
		if err != nil {
			err = msgp.WrapError(err, "OffsetPairs")
			return
		}
		for za0001 := range z.OffsetPairs {
			if z.OffsetPairs[za0001] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.OffsetPairs[za0001].TopicName == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.OffsetPairs[za0001].Offset == 0 {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				err = en.Append(0x80 | uint8(zb0002Len))
				if err != nil {
					return
				}
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// write "tpName"
					err = en.Append(0xa6, 0x74, 0x70, 0x4e, 0x61, 0x6d, 0x65)
					if err != nil {
						return
					}
					err = en.WriteString(z.OffsetPairs[za0001].TopicName)
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001, "TopicName")
						return
					}
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// write "off"
					err = en.Append(0xa3, 0x6f, 0x66, 0x66)
					if err != nil {
						return
					}
					err = en.WriteUint64(z.OffsetPairs[za0001].Offset)
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001, "Offset")
						return
					}
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *InitReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.ProdId == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.OffsetPairs == nil {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "prodId"
		o = append(o, 0xa6, 0x70, 0x72, 0x6f, 0x64, 0x49, 0x64)
		if z.ProdId == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.ProdId.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "ProdId")
				return
			}
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "offPairs"
		o = append(o, 0xa8, 0x6f, 0x66, 0x66, 0x50, 0x61, 0x69, 0x72, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.OffsetPairs)))
		for za0001 := range z.OffsetPairs {
			if z.OffsetPairs[za0001] == nil {
				o = msgp.AppendNil(o)
			} else {
				// omitempty: check for empty values
				zb0002Len := uint32(2)
				var zb0002Mask uint8 /* 2 bits */
				_ = zb0002Mask
				if z.OffsetPairs[za0001].TopicName == "" {
					zb0002Len--
					zb0002Mask |= 0x1
				}
				if z.OffsetPairs[za0001].Offset == 0 {
					zb0002Len--
					zb0002Mask |= 0x2
				}
				// variable map header, size zb0002Len
				o = append(o, 0x80|uint8(zb0002Len))
				if (zb0002Mask & 0x1) == 0 { // if not empty
					// string "tpName"
					o = append(o, 0xa6, 0x74, 0x70, 0x4e, 0x61, 0x6d, 0x65)
					o = msgp.AppendString(o, z.OffsetPairs[za0001].TopicName)
				}
				if (zb0002Mask & 0x2) == 0 { // if not empty
					// string "off"
					o = append(o, 0xa3, 0x6f, 0x66, 0x66)
					o = msgp.AppendUint64(o, z.OffsetPairs[za0001].Offset)
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *InitReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "prodId":
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.ProdId = nil
			} else {
				if z.ProdId == nil {
					z.ProdId = new(commtypes.ProdId)
				}
				bts, err = z.ProdId.UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ProdId")
					return
				}
			}
		case "offPairs":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "OffsetPairs")
				return
			}
			if cap(z.OffsetPairs) >= int(zb0002) {
				z.OffsetPairs = (z.OffsetPairs)[:zb0002]
			} else {
				z.OffsetPairs = make([]*OffsetPair, zb0002)
			}
			for za0001 := range z.OffsetPairs {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.OffsetPairs[za0001] = nil
				} else {
					if z.OffsetPairs[za0001] == nil {
						z.OffsetPairs[za0001] = new(OffsetPair)
					}
					var zb0003 uint32
					zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "OffsetPairs", za0001)
						return
					}
					for zb0003 > 0 {
						zb0003--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "OffsetPairs", za0001)
							return
						}
						switch msgp.UnsafeString(field) {
						case "tpName":
							z.OffsetPairs[za0001].TopicName, bts, err = msgp.ReadStringBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "TopicName")
								return
							}
						case "off":
							z.OffsetPairs[za0001].Offset, bts, err = msgp.ReadUint64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001, "Offset")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "OffsetPairs", za0001)
								return
							}
						}
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *InitReply) Msgsize() (s int) {
	s = 1 + 7
	if z.ProdId == nil {
		s += msgp.NilSize
	} else {
		s += z.ProdId.Msgsize()
	}
	s += 9 + msgp.ArrayHeaderSize
	for za0001 := range z.OffsetPairs {
		if z.OffsetPairs[za0001] == nil {
			s += msgp.NilSize
		} else {
			s += 1 + 7 + msgp.StringPrefixSize + len(z.OffsetPairs[za0001].TopicName) + 4 + msgp.Uint64Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *OffsetPair) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tpName":
			z.TopicName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TopicName")
				return
			}
		case "off":
			z.Offset, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z OffsetPair) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.TopicName == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Offset == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "tpName"
		err = en.Append(0xa6, 0x74, 0x70, 0x4e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.TopicName)
		if err != nil {
			err = msgp.WrapError(err, "TopicName")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "off"
		err = en.Append(0xa3, 0x6f, 0x66, 0x66)
		if err != nil {
			return
		}
		err = en.WriteUint64(z.Offset)
		if err != nil {
			err = msgp.WrapError(err, "Offset")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z OffsetPair) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.TopicName == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.Offset == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "tpName"
		o = append(o, 0xa6, 0x74, 0x70, 0x4e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.TopicName)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "off"
		o = append(o, 0xa3, 0x6f, 0x66, 0x66)
		o = msgp.AppendUint64(o, z.Offset)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *OffsetPair) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tpName":
			z.TopicName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicName")
				return
			}
		case "off":
			z.Offset, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Offset")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z OffsetPair) Msgsize() (s int) {
	s = 1 + 7 + msgp.StringPrefixSize + len(z.TopicName) + 4 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *StreamInfo) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tpN":
			z.TopicName, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "TopicName")
				return
			}
		case "numPar":
			z.NumPartition, err = dc.ReadUint32()
			if err != nil {
				err = msgp.WrapError(err, "NumPartition")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z StreamInfo) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.TopicName == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.NumPartition == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "tpN"
		err = en.Append(0xa3, 0x74, 0x70, 0x4e)
		if err != nil {
			return
		}
		err = en.WriteString(z.TopicName)
		if err != nil {
			err = msgp.WrapError(err, "TopicName")
			return
		}
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// write "numPar"
		err = en.Append(0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
		if err != nil {
			return
		}
		err = en.WriteUint32(z.NumPartition)
		if err != nil {
			err = msgp.WrapError(err, "NumPartition")
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z StreamInfo) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(2)
	var zb0001Mask uint8 /* 2 bits */
	_ = zb0001Mask
	if z.TopicName == "" {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	if z.NumPartition == 0 {
		zb0001Len--
		zb0001Mask |= 0x2
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "tpN"
		o = append(o, 0xa3, 0x74, 0x70, 0x4e)
		o = msgp.AppendString(o, z.TopicName)
	}
	if (zb0001Mask & 0x2) == 0 { // if not empty
		// string "numPar"
		o = append(o, 0xa6, 0x6e, 0x75, 0x6d, 0x50, 0x61, 0x72)
		o = msgp.AppendUint32(o, z.NumPartition)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *StreamInfo) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tpN":
			z.TopicName, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicName")
				return
			}
		case "numPar":
			z.NumPartition, bts, err = msgp.ReadUint32Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "NumPartition")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z StreamInfo) Msgsize() (s int) {
	s = 1 + 4 + msgp.StringPrefixSize + len(z.TopicName) + 7 + msgp.Uint32Size
	return
}
