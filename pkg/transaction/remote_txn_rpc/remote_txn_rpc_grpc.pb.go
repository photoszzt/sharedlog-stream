// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: pkg/transaction/remote_txn_rpc/remote_txn_rpc.proto

package remote_txn_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	txn_data "sharedlog-stream/pkg/txn_data"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteTxnMngrClient is the client API for RemoteTxnMngr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteTxnMngrClient interface {
	Init(ctx context.Context, in *InitArg, opts ...grpc.CallOption) (*InitReply, error)
	AppendTpPar(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	AbortTxn(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CommitTxnAsyncComplete(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*CommitReply, error)
	CommitTxn(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*CommitReply, error)
	AppendConsumedOffset(ctx context.Context, in *ConsumedOffsets, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type remoteTxnMngrClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteTxnMngrClient(cc grpc.ClientConnInterface) RemoteTxnMngrClient {
	return &remoteTxnMngrClient{cc}
}

func (c *remoteTxnMngrClient) Init(ctx context.Context, in *InitArg, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := c.cc.Invoke(ctx, "/remote_txn_rpc.RemoteTxnMngr/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTxnMngrClient) AppendTpPar(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_txn_rpc.RemoteTxnMngr/AppendTpPar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTxnMngrClient) AbortTxn(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_txn_rpc.RemoteTxnMngr/AbortTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTxnMngrClient) CommitTxnAsyncComplete(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/remote_txn_rpc.RemoteTxnMngr/CommitTxnAsyncComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTxnMngrClient) CommitTxn(ctx context.Context, in *txn_data.TxnMetaMsg, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := c.cc.Invoke(ctx, "/remote_txn_rpc.RemoteTxnMngr/CommitTxn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteTxnMngrClient) AppendConsumedOffset(ctx context.Context, in *ConsumedOffsets, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/remote_txn_rpc.RemoteTxnMngr/AppendConsumedOffset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteTxnMngrServer is the server API for RemoteTxnMngr service.
// All implementations must embed UnimplementedRemoteTxnMngrServer
// for forward compatibility
type RemoteTxnMngrServer interface {
	Init(context.Context, *InitArg) (*InitReply, error)
	AppendTpPar(context.Context, *txn_data.TxnMetaMsg) (*emptypb.Empty, error)
	AbortTxn(context.Context, *txn_data.TxnMetaMsg) (*emptypb.Empty, error)
	CommitTxnAsyncComplete(context.Context, *txn_data.TxnMetaMsg) (*CommitReply, error)
	CommitTxn(context.Context, *txn_data.TxnMetaMsg) (*CommitReply, error)
	AppendConsumedOffset(context.Context, *ConsumedOffsets) (*emptypb.Empty, error)
	mustEmbedUnimplementedRemoteTxnMngrServer()
}

// UnimplementedRemoteTxnMngrServer must be embedded to have forward compatible implementations.
type UnimplementedRemoteTxnMngrServer struct {
}

func (UnimplementedRemoteTxnMngrServer) Init(context.Context, *InitArg) (*InitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedRemoteTxnMngrServer) AppendTpPar(context.Context, *txn_data.TxnMetaMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendTpPar not implemented")
}
func (UnimplementedRemoteTxnMngrServer) AbortTxn(context.Context, *txn_data.TxnMetaMsg) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbortTxn not implemented")
}
func (UnimplementedRemoteTxnMngrServer) CommitTxnAsyncComplete(context.Context, *txn_data.TxnMetaMsg) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTxnAsyncComplete not implemented")
}
func (UnimplementedRemoteTxnMngrServer) CommitTxn(context.Context, *txn_data.TxnMetaMsg) (*CommitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommitTxn not implemented")
}
func (UnimplementedRemoteTxnMngrServer) AppendConsumedOffset(context.Context, *ConsumedOffsets) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendConsumedOffset not implemented")
}
func (UnimplementedRemoteTxnMngrServer) mustEmbedUnimplementedRemoteTxnMngrServer() {}

// UnsafeRemoteTxnMngrServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteTxnMngrServer will
// result in compilation errors.
type UnsafeRemoteTxnMngrServer interface {
	mustEmbedUnimplementedRemoteTxnMngrServer()
}

func RegisterRemoteTxnMngrServer(s grpc.ServiceRegistrar, srv RemoteTxnMngrServer) {
	s.RegisterService(&RemoteTxnMngr_ServiceDesc, srv)
}

func _RemoteTxnMngr_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitArg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTxnMngrServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_txn_rpc.RemoteTxnMngr/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTxnMngrServer).Init(ctx, req.(*InitArg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTxnMngr_AppendTpPar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(txn_data.TxnMetaMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTxnMngrServer).AppendTpPar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_txn_rpc.RemoteTxnMngr/AppendTpPar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTxnMngrServer).AppendTpPar(ctx, req.(*txn_data.TxnMetaMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTxnMngr_AbortTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(txn_data.TxnMetaMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTxnMngrServer).AbortTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_txn_rpc.RemoteTxnMngr/AbortTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTxnMngrServer).AbortTxn(ctx, req.(*txn_data.TxnMetaMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTxnMngr_CommitTxnAsyncComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(txn_data.TxnMetaMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTxnMngrServer).CommitTxnAsyncComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_txn_rpc.RemoteTxnMngr/CommitTxnAsyncComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTxnMngrServer).CommitTxnAsyncComplete(ctx, req.(*txn_data.TxnMetaMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTxnMngr_CommitTxn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(txn_data.TxnMetaMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTxnMngrServer).CommitTxn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_txn_rpc.RemoteTxnMngr/CommitTxn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTxnMngrServer).CommitTxn(ctx, req.(*txn_data.TxnMetaMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteTxnMngr_AppendConsumedOffset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumedOffsets)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteTxnMngrServer).AppendConsumedOffset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote_txn_rpc.RemoteTxnMngr/AppendConsumedOffset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteTxnMngrServer).AppendConsumedOffset(ctx, req.(*ConsumedOffsets))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteTxnMngr_ServiceDesc is the grpc.ServiceDesc for RemoteTxnMngr service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteTxnMngr_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "remote_txn_rpc.RemoteTxnMngr",
	HandlerType: (*RemoteTxnMngrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _RemoteTxnMngr_Init_Handler,
		},
		{
			MethodName: "AppendTpPar",
			Handler:    _RemoteTxnMngr_AppendTpPar_Handler,
		},
		{
			MethodName: "AbortTxn",
			Handler:    _RemoteTxnMngr_AbortTxn_Handler,
		},
		{
			MethodName: "CommitTxnAsyncComplete",
			Handler:    _RemoteTxnMngr_CommitTxnAsyncComplete_Handler,
		},
		{
			MethodName: "CommitTxn",
			Handler:    _RemoteTxnMngr_CommitTxn_Handler,
		},
		{
			MethodName: "AppendConsumedOffset",
			Handler:    _RemoteTxnMngr_AppendConsumedOffset_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/transaction/remote_txn_rpc/remote_txn_rpc.proto",
}
