package sharedlog_stream

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TopicPartition) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "topic":
			z.Topic, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Topic")
				return
			}
		case "parnum":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ParNum")
				return
			}
			if cap(z.ParNum) >= int(zb0002) {
				z.ParNum = (z.ParNum)[:zb0002]
			} else {
				z.ParNum = make([]uint8, zb0002)
			}
			for za0001 := range z.ParNum {
				z.ParNum[za0001], err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "ParNum", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TopicPartition) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "topic"
	err = en.Append(0x82, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Topic)
	if err != nil {
		err = msgp.WrapError(err, "Topic")
		return
	}
	// write "parnum"
	err = en.Append(0xa6, 0x70, 0x61, 0x72, 0x6e, 0x75, 0x6d)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ParNum)))
	if err != nil {
		err = msgp.WrapError(err, "ParNum")
		return
	}
	for za0001 := range z.ParNum {
		err = en.WriteUint8(z.ParNum[za0001])
		if err != nil {
			err = msgp.WrapError(err, "ParNum", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TopicPartition) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "topic"
	o = append(o, 0x82, 0xa5, 0x74, 0x6f, 0x70, 0x69, 0x63)
	o = msgp.AppendString(o, z.Topic)
	// string "parnum"
	o = append(o, 0xa6, 0x70, 0x61, 0x72, 0x6e, 0x75, 0x6d)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ParNum)))
	for za0001 := range z.ParNum {
		o = msgp.AppendUint8(o, z.ParNum[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TopicPartition) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "topic":
			z.Topic, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Topic")
				return
			}
		case "parnum":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ParNum")
				return
			}
			if cap(z.ParNum) >= int(zb0002) {
				z.ParNum = (z.ParNum)[:zb0002]
			} else {
				z.ParNum = make([]uint8, zb0002)
			}
			for za0001 := range z.ParNum {
				z.ParNum[za0001], bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ParNum", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TopicPartition) Msgsize() (s int) {
	s = 1 + 6 + msgp.StringPrefixSize + len(z.Topic) + 7 + msgp.ArrayHeaderSize + (len(z.ParNum) * (msgp.Uint8Size))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TransactionState) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TransactionState(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TransactionState) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TransactionState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TransactionState(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TransactionState) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxnMark) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TxnMark(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TxnMark) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxnMark) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMark) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TxnMark(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxnMark) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxnMarker) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mk":
			z.Mark, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Mark")
				return
			}
		case "ae":
			z.AppEpoch, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "AppEpoch")
				return
			}
		case "aid":
			z.AppId, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AppId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TxnMarker) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "mk"
	err = en.Append(0x83, 0xa2, 0x6d, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.Mark)
	if err != nil {
		err = msgp.WrapError(err, "Mark")
		return
	}
	// write "ae"
	err = en.Append(0xa2, 0x61, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.AppEpoch)
	if err != nil {
		err = msgp.WrapError(err, "AppEpoch")
		return
	}
	// write "aid"
	err = en.Append(0xa3, 0x61, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AppId)
	if err != nil {
		err = msgp.WrapError(err, "AppId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxnMarker) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "mk"
	o = append(o, 0x83, 0xa2, 0x6d, 0x6b)
	o = msgp.AppendUint8(o, z.Mark)
	// string "ae"
	o = append(o, 0xa2, 0x61, 0x65)
	o = msgp.AppendUint16(o, z.AppEpoch)
	// string "aid"
	o = append(o, 0xa3, 0x61, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.AppId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMarker) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mk":
			z.Mark, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mark")
				return
			}
		case "ae":
			z.AppEpoch, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppEpoch")
				return
			}
		case "aid":
			z.AppId, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxnMarker) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint8Size + 3 + msgp.Uint16Size + 4 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxnMetadata) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "st":
			{
				var zb0002 uint8
				zb0002, err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "State")
					return
				}
				z.State = TransactionState(zb0002)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TxnMetadata) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 1
	// write "st"
	err = en.Append(0x81, 0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint8(uint8(z.State))
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxnMetadata) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 1
	// string "st"
	o = append(o, 0x81, 0xa2, 0x73, 0x74)
	o = msgp.AppendUint8(o, uint8(z.State))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMetadata) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "st":
			{
				var zb0002 uint8
				zb0002, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "State")
					return
				}
				z.State = TransactionState(zb0002)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxnMetadata) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint8Size
	return
}
