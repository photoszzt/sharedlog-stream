// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package sharedlog_stream

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *CommitMarker) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_4b64c0a0f0a9dfaa_0 uint8
		zgensym_4b64c0a0f0a9dfaa_0, err = dc.ReadUint8()
		(*z) = CommitMarker(zgensym_4b64c0a0f0a9dfaa_0)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z CommitMarker) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z CommitMarker) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CommitMarker) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *CommitMarker) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_4b64c0a0f0a9dfaa_1 uint8
		zgensym_4b64c0a0f0a9dfaa_1, bts, err = nbs.ReadUint8Bytes(bts)

		if err != nil {
			return
		}
		(*z) = CommitMarker(zgensym_4b64c0a0f0a9dfaa_1)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z CommitMarker) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TopicPartition) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields2zgensym_4b64c0a0f0a9dfaa_3 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields2zgensym_4b64c0a0f0a9dfaa_3 uint32
	totalEncodedFields2zgensym_4b64c0a0f0a9dfaa_3, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3 := totalEncodedFields2zgensym_4b64c0a0f0a9dfaa_3
	missingFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3 := maxFields2zgensym_4b64c0a0f0a9dfaa_3 - totalEncodedFields2zgensym_4b64c0a0f0a9dfaa_3

	var nextMiss2zgensym_4b64c0a0f0a9dfaa_3 int32 = -1
	var found2zgensym_4b64c0a0f0a9dfaa_3 [maxFields2zgensym_4b64c0a0f0a9dfaa_3]bool
	var curField2zgensym_4b64c0a0f0a9dfaa_3 string

doneWithStruct2zgensym_4b64c0a0f0a9dfaa_3:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3 > 0 || missingFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3, missingFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3, msgp.ShowFound(found2zgensym_4b64c0a0f0a9dfaa_3[:]), decodeMsgFieldOrder2zgensym_4b64c0a0f0a9dfaa_3)
		if encodedFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3 > 0 {
			encodedFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField2zgensym_4b64c0a0f0a9dfaa_3 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss2zgensym_4b64c0a0f0a9dfaa_3 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss2zgensym_4b64c0a0f0a9dfaa_3 = 0
			}
			for nextMiss2zgensym_4b64c0a0f0a9dfaa_3 < maxFields2zgensym_4b64c0a0f0a9dfaa_3 && (found2zgensym_4b64c0a0f0a9dfaa_3[nextMiss2zgensym_4b64c0a0f0a9dfaa_3] || decodeMsgFieldSkip2zgensym_4b64c0a0f0a9dfaa_3[nextMiss2zgensym_4b64c0a0f0a9dfaa_3]) {
				nextMiss2zgensym_4b64c0a0f0a9dfaa_3++
			}
			if nextMiss2zgensym_4b64c0a0f0a9dfaa_3 == maxFields2zgensym_4b64c0a0f0a9dfaa_3 {
				// filled all the empty fields!
				break doneWithStruct2zgensym_4b64c0a0f0a9dfaa_3
			}
			missingFieldsLeft2zgensym_4b64c0a0f0a9dfaa_3--
			curField2zgensym_4b64c0a0f0a9dfaa_3 = decodeMsgFieldOrder2zgensym_4b64c0a0f0a9dfaa_3[nextMiss2zgensym_4b64c0a0f0a9dfaa_3]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField2zgensym_4b64c0a0f0a9dfaa_3)
		switch curField2zgensym_4b64c0a0f0a9dfaa_3 {
		// -- templateDecodeMsg ends here --

		case "Topic_zid00_str":
			found2zgensym_4b64c0a0f0a9dfaa_3[0] = true
			z.Topic, err = dc.ReadString()
			if err != nil {
				return
			}
		case "ParNum_zid01_u32":
			found2zgensym_4b64c0a0f0a9dfaa_3[1] = true
			z.ParNum, err = dc.ReadUint32()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss2zgensym_4b64c0a0f0a9dfaa_3 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TopicPartition
var decodeMsgFieldOrder2zgensym_4b64c0a0f0a9dfaa_3 = []string{"Topic_zid00_str", "ParNum_zid01_u32"}

var decodeMsgFieldSkip2zgensym_4b64c0a0f0a9dfaa_3 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z TopicPartition) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (len(z.Topic) == 0) // string, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.ParNum == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z TopicPartition) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_4b64c0a0f0a9dfaa_4 [2]bool
	fieldsInUse_zgensym_4b64c0a0f0a9dfaa_5 := z.fieldsNotEmpty(empty_zgensym_4b64c0a0f0a9dfaa_4[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_4b64c0a0f0a9dfaa_5 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TopicPartition'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x6f, 0x70, 0x69, 0x63, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e})
	if err != nil {
		return err
	}

	if !empty_zgensym_4b64c0a0f0a9dfaa_4[0] {
		// write "Topic_zid00_str"
		err = en.Append(0xaf, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		if err != nil {
			return err
		}
		err = en.WriteString(z.Topic)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_4b64c0a0f0a9dfaa_4[1] {
		// write "ParNum_zid01_u32"
		err = en.Append(0xb0, 0x50, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x33, 0x32)
		if err != nil {
			return err
		}
		err = en.WriteUint32(z.ParNum)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z TopicPartition) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "Topic_zid00_str"
		o = append(o, 0xaf, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x73, 0x74, 0x72)
		o = msgp.AppendString(o, z.Topic)
	}

	if !empty[1] {
		// string "ParNum_zid01_u32"
		o = append(o, 0xb0, 0x50, 0x61, 0x72, 0x4e, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x33, 0x32)
		o = msgp.AppendUint32(o, z.ParNum)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TopicPartition) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TopicPartition) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields6zgensym_4b64c0a0f0a9dfaa_7 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields6zgensym_4b64c0a0f0a9dfaa_7 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields6zgensym_4b64c0a0f0a9dfaa_7, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7 := totalEncodedFields6zgensym_4b64c0a0f0a9dfaa_7
	missingFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7 := maxFields6zgensym_4b64c0a0f0a9dfaa_7 - totalEncodedFields6zgensym_4b64c0a0f0a9dfaa_7

	var nextMiss6zgensym_4b64c0a0f0a9dfaa_7 int32 = -1
	var found6zgensym_4b64c0a0f0a9dfaa_7 [maxFields6zgensym_4b64c0a0f0a9dfaa_7]bool
	var curField6zgensym_4b64c0a0f0a9dfaa_7 string

doneWithStruct6zgensym_4b64c0a0f0a9dfaa_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7 > 0 || missingFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7, missingFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7, msgp.ShowFound(found6zgensym_4b64c0a0f0a9dfaa_7[:]), unmarshalMsgFieldOrder6zgensym_4b64c0a0f0a9dfaa_7)
		if encodedFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7 > 0 {
			encodedFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField6zgensym_4b64c0a0f0a9dfaa_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_4b64c0a0f0a9dfaa_7 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss6zgensym_4b64c0a0f0a9dfaa_7 = 0
			}
			for nextMiss6zgensym_4b64c0a0f0a9dfaa_7 < maxFields6zgensym_4b64c0a0f0a9dfaa_7 && (found6zgensym_4b64c0a0f0a9dfaa_7[nextMiss6zgensym_4b64c0a0f0a9dfaa_7] || unmarshalMsgFieldSkip6zgensym_4b64c0a0f0a9dfaa_7[nextMiss6zgensym_4b64c0a0f0a9dfaa_7]) {
				nextMiss6zgensym_4b64c0a0f0a9dfaa_7++
			}
			if nextMiss6zgensym_4b64c0a0f0a9dfaa_7 == maxFields6zgensym_4b64c0a0f0a9dfaa_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_4b64c0a0f0a9dfaa_7
			}
			missingFieldsLeft6zgensym_4b64c0a0f0a9dfaa_7--
			curField6zgensym_4b64c0a0f0a9dfaa_7 = unmarshalMsgFieldOrder6zgensym_4b64c0a0f0a9dfaa_7[nextMiss6zgensym_4b64c0a0f0a9dfaa_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_4b64c0a0f0a9dfaa_7)
		switch curField6zgensym_4b64c0a0f0a9dfaa_7 {
		// -- templateUnmarshalMsg ends here --

		case "Topic_zid00_str":
			found6zgensym_4b64c0a0f0a9dfaa_7[0] = true
			z.Topic, bts, err = nbs.ReadStringBytes(bts)

			if err != nil {
				return
			}
		case "ParNum_zid01_u32":
			found6zgensym_4b64c0a0f0a9dfaa_7[1] = true
			z.ParNum, bts, err = nbs.ReadUint32Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_4b64c0a0f0a9dfaa_7 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TopicPartition
var unmarshalMsgFieldOrder6zgensym_4b64c0a0f0a9dfaa_7 = []string{"Topic_zid00_str", "ParNum_zid01_u32"}

var unmarshalMsgFieldSkip6zgensym_4b64c0a0f0a9dfaa_7 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TopicPartition) Msgsize() (s int) {
	s = 1 + 16 + msgp.StringPrefixSize + len(z.Topic) + 17 + msgp.Uint32Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TransactionStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	{
		var zgensym_4b64c0a0f0a9dfaa_8 uint8
		zgensym_4b64c0a0f0a9dfaa_8, err = dc.ReadUint8()
		(*z) = TransactionStatus(zgensym_4b64c0a0f0a9dfaa_8)
	}
	if err != nil {
		return
	}
	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// EncodeMsg implements msgp.Encodable
func (z TransactionStatus) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	err = en.WriteUint8(uint8(z))
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TransactionStatus) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TransactionStatus) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	{
		var zgensym_4b64c0a0f0a9dfaa_9 uint8
		zgensym_4b64c0a0f0a9dfaa_9, bts, err = nbs.ReadUint8Bytes(bts)

		if err != nil {
			return
		}
		(*z) = TransactionStatus(zgensym_4b64c0a0f0a9dfaa_9)
	}
	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TransactionStatus) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *TxnState) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields10zgensym_4b64c0a0f0a9dfaa_11 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields10zgensym_4b64c0a0f0a9dfaa_11 uint32
	totalEncodedFields10zgensym_4b64c0a0f0a9dfaa_11, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11 := totalEncodedFields10zgensym_4b64c0a0f0a9dfaa_11
	missingFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11 := maxFields10zgensym_4b64c0a0f0a9dfaa_11 - totalEncodedFields10zgensym_4b64c0a0f0a9dfaa_11

	var nextMiss10zgensym_4b64c0a0f0a9dfaa_11 int32 = -1
	var found10zgensym_4b64c0a0f0a9dfaa_11 [maxFields10zgensym_4b64c0a0f0a9dfaa_11]bool
	var curField10zgensym_4b64c0a0f0a9dfaa_11 string

doneWithStruct10zgensym_4b64c0a0f0a9dfaa_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11 > 0 || missingFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11, missingFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11, msgp.ShowFound(found10zgensym_4b64c0a0f0a9dfaa_11[:]), decodeMsgFieldOrder10zgensym_4b64c0a0f0a9dfaa_11)
		if encodedFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11 > 0 {
			encodedFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField10zgensym_4b64c0a0f0a9dfaa_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_4b64c0a0f0a9dfaa_11 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss10zgensym_4b64c0a0f0a9dfaa_11 = 0
			}
			for nextMiss10zgensym_4b64c0a0f0a9dfaa_11 < maxFields10zgensym_4b64c0a0f0a9dfaa_11 && (found10zgensym_4b64c0a0f0a9dfaa_11[nextMiss10zgensym_4b64c0a0f0a9dfaa_11] || decodeMsgFieldSkip10zgensym_4b64c0a0f0a9dfaa_11[nextMiss10zgensym_4b64c0a0f0a9dfaa_11]) {
				nextMiss10zgensym_4b64c0a0f0a9dfaa_11++
			}
			if nextMiss10zgensym_4b64c0a0f0a9dfaa_11 == maxFields10zgensym_4b64c0a0f0a9dfaa_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_4b64c0a0f0a9dfaa_11
			}
			missingFieldsLeft10zgensym_4b64c0a0f0a9dfaa_11--
			curField10zgensym_4b64c0a0f0a9dfaa_11 = decodeMsgFieldOrder10zgensym_4b64c0a0f0a9dfaa_11[nextMiss10zgensym_4b64c0a0f0a9dfaa_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_4b64c0a0f0a9dfaa_11)
		switch curField10zgensym_4b64c0a0f0a9dfaa_11 {
		// -- templateDecodeMsg ends here --

		case "State_zid00_rct":
			found10zgensym_4b64c0a0f0a9dfaa_11[0] = true
			{
				var zgensym_4b64c0a0f0a9dfaa_12 uint8
				zgensym_4b64c0a0f0a9dfaa_12, err = dc.ReadUint8()
				z.State = TransactionStatus(zgensym_4b64c0a0f0a9dfaa_12)
			}
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_4b64c0a0f0a9dfaa_11 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TxnState
var decodeMsgFieldOrder10zgensym_4b64c0a0f0a9dfaa_11 = []string{"State_zid00_rct"}

var decodeMsgFieldSkip10zgensym_4b64c0a0f0a9dfaa_11 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z TxnState) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.State == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z TxnState) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_4b64c0a0f0a9dfaa_13 [1]bool
	fieldsInUse_zgensym_4b64c0a0f0a9dfaa_14 := z.fieldsNotEmpty(empty_zgensym_4b64c0a0f0a9dfaa_13[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_4b64c0a0f0a9dfaa_14 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'TxnState'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x54, 0x78, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65})
	if err != nil {
		return err
	}

	if !empty_zgensym_4b64c0a0f0a9dfaa_13[0] {
		// write "State_zid00_rct"
		err = en.Append(0xaf, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		if err != nil {
			return err
		}
		err = en.WriteUint8(uint8(z.State))
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxnState) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "State_zid00_rct"
		o = append(o, 0xaf, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x72, 0x63, 0x74)
		o = msgp.AppendUint8(o, uint8(z.State))
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *TxnState) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields15zgensym_4b64c0a0f0a9dfaa_16 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields15zgensym_4b64c0a0f0a9dfaa_16 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields15zgensym_4b64c0a0f0a9dfaa_16, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16 := totalEncodedFields15zgensym_4b64c0a0f0a9dfaa_16
	missingFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16 := maxFields15zgensym_4b64c0a0f0a9dfaa_16 - totalEncodedFields15zgensym_4b64c0a0f0a9dfaa_16

	var nextMiss15zgensym_4b64c0a0f0a9dfaa_16 int32 = -1
	var found15zgensym_4b64c0a0f0a9dfaa_16 [maxFields15zgensym_4b64c0a0f0a9dfaa_16]bool
	var curField15zgensym_4b64c0a0f0a9dfaa_16 string

doneWithStruct15zgensym_4b64c0a0f0a9dfaa_16:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16 > 0 || missingFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16, missingFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16, msgp.ShowFound(found15zgensym_4b64c0a0f0a9dfaa_16[:]), unmarshalMsgFieldOrder15zgensym_4b64c0a0f0a9dfaa_16)
		if encodedFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16 > 0 {
			encodedFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField15zgensym_4b64c0a0f0a9dfaa_16 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss15zgensym_4b64c0a0f0a9dfaa_16 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss15zgensym_4b64c0a0f0a9dfaa_16 = 0
			}
			for nextMiss15zgensym_4b64c0a0f0a9dfaa_16 < maxFields15zgensym_4b64c0a0f0a9dfaa_16 && (found15zgensym_4b64c0a0f0a9dfaa_16[nextMiss15zgensym_4b64c0a0f0a9dfaa_16] || unmarshalMsgFieldSkip15zgensym_4b64c0a0f0a9dfaa_16[nextMiss15zgensym_4b64c0a0f0a9dfaa_16]) {
				nextMiss15zgensym_4b64c0a0f0a9dfaa_16++
			}
			if nextMiss15zgensym_4b64c0a0f0a9dfaa_16 == maxFields15zgensym_4b64c0a0f0a9dfaa_16 {
				// filled all the empty fields!
				break doneWithStruct15zgensym_4b64c0a0f0a9dfaa_16
			}
			missingFieldsLeft15zgensym_4b64c0a0f0a9dfaa_16--
			curField15zgensym_4b64c0a0f0a9dfaa_16 = unmarshalMsgFieldOrder15zgensym_4b64c0a0f0a9dfaa_16[nextMiss15zgensym_4b64c0a0f0a9dfaa_16]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField15zgensym_4b64c0a0f0a9dfaa_16)
		switch curField15zgensym_4b64c0a0f0a9dfaa_16 {
		// -- templateUnmarshalMsg ends here --

		case "State_zid00_rct":
			found15zgensym_4b64c0a0f0a9dfaa_16[0] = true
			{
				var zgensym_4b64c0a0f0a9dfaa_17 uint8
				zgensym_4b64c0a0f0a9dfaa_17, bts, err = nbs.ReadUint8Bytes(bts)

				if err != nil {
					return
				}
				z.State = TransactionStatus(zgensym_4b64c0a0f0a9dfaa_17)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss15zgensym_4b64c0a0f0a9dfaa_16 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of TxnState
var unmarshalMsgFieldOrder15zgensym_4b64c0a0f0a9dfaa_16 = []string{"State_zid00_rct"}

var unmarshalMsgFieldSkip15zgensym_4b64c0a0f0a9dfaa_16 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxnState) Msgsize() (s int) {
	s = 1 + 16 + msgp.Uint8Size
	return
}
