package sharedlog_stream

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TransactionState) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TransactionState(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TransactionState) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TransactionState) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TransactionState) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TransactionState(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TransactionState) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxnMetadata) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tp":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "TopicPartitions")
				return
			}
			if cap(z.TopicPartitions) >= int(zb0002) {
				z.TopicPartitions = (z.TopicPartitions)[:zb0002]
			} else {
				z.TopicPartitions = make([]TopicPartition, zb0002)
			}
			for za0001 := range z.TopicPartitions {
				err = z.TopicPartitions[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "TopicPartitions", za0001)
					return
				}
			}
		case "tid":
			z.TaskId, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "TaskId")
				return
			}
		case "te":
			z.TaskEpoch, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "TaskEpoch")
				return
			}
		case "st":
			{
				var zb0003 uint8
				zb0003, err = dc.ReadUint8()
				if err != nil {
					err = msgp.WrapError(err, "State")
					return
				}
				z.State = TransactionState(zb0003)
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TxnMetadata) EncodeMsg(en *msgp.Writer) (err error) {
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.TopicPartitions == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	err = en.Append(0x80 | uint8(zb0001Len))
	if err != nil {
		return
	}
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// write "tp"
		err = en.Append(0xa2, 0x74, 0x70)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.TopicPartitions)))
		if err != nil {
			err = msgp.WrapError(err, "TopicPartitions")
			return
		}
		for za0001 := range z.TopicPartitions {
			err = z.TopicPartitions[za0001].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "TopicPartitions", za0001)
				return
			}
		}
	}
	// write "tid"
	err = en.Append(0xa3, 0x74, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.TaskId)
	if err != nil {
		err = msgp.WrapError(err, "TaskId")
		return
	}
	// write "te"
	err = en.Append(0xa2, 0x74, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.TaskEpoch)
	if err != nil {
		err = msgp.WrapError(err, "TaskEpoch")
		return
	}
	// write "st"
	err = en.Append(0xa2, 0x73, 0x74)
	if err != nil {
		return
	}
	err = en.WriteUint8(uint8(z.State))
	if err != nil {
		err = msgp.WrapError(err, "State")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TxnMetadata) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// omitempty: check for empty values
	zb0001Len := uint32(4)
	var zb0001Mask uint8 /* 4 bits */
	if z.TopicPartitions == nil {
		zb0001Len--
		zb0001Mask |= 0x1
	}
	// variable map header, size zb0001Len
	o = append(o, 0x80|uint8(zb0001Len))
	if zb0001Len == 0 {
		return
	}
	if (zb0001Mask & 0x1) == 0 { // if not empty
		// string "tp"
		o = append(o, 0xa2, 0x74, 0x70)
		o = msgp.AppendArrayHeader(o, uint32(len(z.TopicPartitions)))
		for za0001 := range z.TopicPartitions {
			o, err = z.TopicPartitions[za0001].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "TopicPartitions", za0001)
				return
			}
		}
	}
	// string "tid"
	o = append(o, 0xa3, 0x74, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.TaskId)
	// string "te"
	o = append(o, 0xa2, 0x74, 0x65)
	o = msgp.AppendUint16(o, z.TaskEpoch)
	// string "st"
	o = append(o, 0xa2, 0x73, 0x74)
	o = msgp.AppendUint8(o, uint8(z.State))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMetadata) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "tp":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TopicPartitions")
				return
			}
			if cap(z.TopicPartitions) >= int(zb0002) {
				z.TopicPartitions = (z.TopicPartitions)[:zb0002]
			} else {
				z.TopicPartitions = make([]TopicPartition, zb0002)
			}
			for za0001 := range z.TopicPartitions {
				bts, err = z.TopicPartitions[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "TopicPartitions", za0001)
					return
				}
			}
		case "tid":
			z.TaskId, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TaskId")
				return
			}
		case "te":
			z.TaskEpoch, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TaskEpoch")
				return
			}
		case "st":
			{
				var zb0003 uint8
				zb0003, bts, err = msgp.ReadUint8Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "State")
					return
				}
				z.State = TransactionState(zb0003)
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TxnMetadata) Msgsize() (s int) {
	s = 1 + 3 + msgp.ArrayHeaderSize
	for za0001 := range z.TopicPartitions {
		s += z.TopicPartitions[za0001].Msgsize()
	}
	s += 4 + msgp.Uint64Size + 3 + msgp.Uint16Size + 3 + msgp.Uint8Size
	return
}
