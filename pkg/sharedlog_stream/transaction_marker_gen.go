package sharedlog_stream

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *TxnMark) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 uint8
		zb0001, err = dc.ReadUint8()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TxnMark(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TxnMark) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteUint8(uint8(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxnMark) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendUint8(o, uint8(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMark) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 uint8
		zb0001, bts, err = msgp.ReadUint8Bytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = TxnMark(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxnMark) Msgsize() (s int) {
	s = msgp.Uint8Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TxnMarker) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mk":
			z.Mark, err = dc.ReadUint8()
			if err != nil {
				err = msgp.WrapError(err, "Mark")
				return
			}
		case "ae":
			z.AppEpoch, err = dc.ReadUint16()
			if err != nil {
				err = msgp.WrapError(err, "AppEpoch")
				return
			}
		case "aid":
			z.AppId, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "AppId")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z TxnMarker) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "mk"
	err = en.Append(0x83, 0xa2, 0x6d, 0x6b)
	if err != nil {
		return
	}
	err = en.WriteUint8(z.Mark)
	if err != nil {
		err = msgp.WrapError(err, "Mark")
		return
	}
	// write "ae"
	err = en.Append(0xa2, 0x61, 0x65)
	if err != nil {
		return
	}
	err = en.WriteUint16(z.AppEpoch)
	if err != nil {
		err = msgp.WrapError(err, "AppEpoch")
		return
	}
	// write "aid"
	err = en.Append(0xa3, 0x61, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.AppId)
	if err != nil {
		err = msgp.WrapError(err, "AppId")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z TxnMarker) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "mk"
	o = append(o, 0x83, 0xa2, 0x6d, 0x6b)
	o = msgp.AppendUint8(o, z.Mark)
	// string "ae"
	o = append(o, 0xa2, 0x61, 0x65)
	o = msgp.AppendUint16(o, z.AppEpoch)
	// string "aid"
	o = append(o, 0xa3, 0x61, 0x69, 0x64)
	o = msgp.AppendUint64(o, z.AppId)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TxnMarker) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "mk":
			z.Mark, bts, err = msgp.ReadUint8Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mark")
				return
			}
		case "ae":
			z.AppEpoch, bts, err = msgp.ReadUint16Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppEpoch")
				return
			}
		case "aid":
			z.AppId, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "AppId")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z TxnMarker) Msgsize() (s int) {
	s = 1 + 3 + msgp.Uint8Size + 3 + msgp.Uint16Size + 4 + msgp.Uint64Size
	return
}
