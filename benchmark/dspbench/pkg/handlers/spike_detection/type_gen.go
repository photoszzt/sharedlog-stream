// Code generated by GREENPACK (github.com/glycerine/greenpack). DO NOT EDIT.

package spike_detection

import (
	"github.com/glycerine/greenpack/msgp"
)

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SensorData) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields0zgensym_86cf238d4b0a69cf_1 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields0zgensym_86cf238d4b0a69cf_1 uint32
	totalEncodedFields0zgensym_86cf238d4b0a69cf_1, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft0zgensym_86cf238d4b0a69cf_1 := totalEncodedFields0zgensym_86cf238d4b0a69cf_1
	missingFieldsLeft0zgensym_86cf238d4b0a69cf_1 := maxFields0zgensym_86cf238d4b0a69cf_1 - totalEncodedFields0zgensym_86cf238d4b0a69cf_1

	var nextMiss0zgensym_86cf238d4b0a69cf_1 int32 = -1
	var found0zgensym_86cf238d4b0a69cf_1 [maxFields0zgensym_86cf238d4b0a69cf_1]bool
	var curField0zgensym_86cf238d4b0a69cf_1 string

doneWithStruct0zgensym_86cf238d4b0a69cf_1:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft0zgensym_86cf238d4b0a69cf_1 > 0 || missingFieldsLeft0zgensym_86cf238d4b0a69cf_1 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft0zgensym_86cf238d4b0a69cf_1, missingFieldsLeft0zgensym_86cf238d4b0a69cf_1, msgp.ShowFound(found0zgensym_86cf238d4b0a69cf_1[:]), decodeMsgFieldOrder0zgensym_86cf238d4b0a69cf_1)
		if encodedFieldsLeft0zgensym_86cf238d4b0a69cf_1 > 0 {
			encodedFieldsLeft0zgensym_86cf238d4b0a69cf_1--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField0zgensym_86cf238d4b0a69cf_1 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss0zgensym_86cf238d4b0a69cf_1 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss0zgensym_86cf238d4b0a69cf_1 = 0
			}
			for nextMiss0zgensym_86cf238d4b0a69cf_1 < maxFields0zgensym_86cf238d4b0a69cf_1 && (found0zgensym_86cf238d4b0a69cf_1[nextMiss0zgensym_86cf238d4b0a69cf_1] || decodeMsgFieldSkip0zgensym_86cf238d4b0a69cf_1[nextMiss0zgensym_86cf238d4b0a69cf_1]) {
				nextMiss0zgensym_86cf238d4b0a69cf_1++
			}
			if nextMiss0zgensym_86cf238d4b0a69cf_1 == maxFields0zgensym_86cf238d4b0a69cf_1 {
				// filled all the empty fields!
				break doneWithStruct0zgensym_86cf238d4b0a69cf_1
			}
			missingFieldsLeft0zgensym_86cf238d4b0a69cf_1--
			curField0zgensym_86cf238d4b0a69cf_1 = decodeMsgFieldOrder0zgensym_86cf238d4b0a69cf_1[nextMiss0zgensym_86cf238d4b0a69cf_1]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField0zgensym_86cf238d4b0a69cf_1)
		switch curField0zgensym_86cf238d4b0a69cf_1 {
		// -- templateDecodeMsg ends here --

		case "val_zid00_f64":
			found0zgensym_86cf238d4b0a69cf_1[0] = true
			z.Val, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case "ts_zid01_u64":
			found0zgensym_86cf238d4b0a69cf_1[1] = true
			z.Timestamp, err = dc.ReadUint64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss0zgensym_86cf238d4b0a69cf_1 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SensorData
var decodeMsgFieldOrder0zgensym_86cf238d4b0a69cf_1 = []string{"val_zid00_f64", "ts_zid01_u64"}

var decodeMsgFieldSkip0zgensym_86cf238d4b0a69cf_1 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z SensorData) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Val == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Timestamp == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z SensorData) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_86cf238d4b0a69cf_2 [2]bool
	fieldsInUse_zgensym_86cf238d4b0a69cf_3 := z.fieldsNotEmpty(empty_zgensym_86cf238d4b0a69cf_2[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_86cf238d4b0a69cf_3 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SensorData'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x65, 0x6e, 0x73, 0x6f, 0x72, 0x44, 0x61, 0x74, 0x61})
	if err != nil {
		return err
	}

	if !empty_zgensym_86cf238d4b0a69cf_2[0] {
		// write "val_zid00_f64"
		err = en.Append(0xad, 0x76, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x66, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteFloat64(z.Val)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_86cf238d4b0a69cf_2[1] {
		// write "ts_zid01_u64"
		err = en.Append(0xac, 0x74, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteUint64(z.Timestamp)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z SensorData) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "val_zid00_f64"
		o = append(o, 0xad, 0x76, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x66, 0x36, 0x34)
		o = msgp.AppendFloat64(o, z.Val)
	}

	if !empty[1] {
		// string "ts_zid01_u64"
		o = append(o, 0xac, 0x74, 0x73, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x75, 0x36, 0x34)
		o = msgp.AppendUint64(o, z.Timestamp)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SensorData) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SensorData) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields4zgensym_86cf238d4b0a69cf_5 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields4zgensym_86cf238d4b0a69cf_5 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields4zgensym_86cf238d4b0a69cf_5, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft4zgensym_86cf238d4b0a69cf_5 := totalEncodedFields4zgensym_86cf238d4b0a69cf_5
	missingFieldsLeft4zgensym_86cf238d4b0a69cf_5 := maxFields4zgensym_86cf238d4b0a69cf_5 - totalEncodedFields4zgensym_86cf238d4b0a69cf_5

	var nextMiss4zgensym_86cf238d4b0a69cf_5 int32 = -1
	var found4zgensym_86cf238d4b0a69cf_5 [maxFields4zgensym_86cf238d4b0a69cf_5]bool
	var curField4zgensym_86cf238d4b0a69cf_5 string

doneWithStruct4zgensym_86cf238d4b0a69cf_5:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft4zgensym_86cf238d4b0a69cf_5 > 0 || missingFieldsLeft4zgensym_86cf238d4b0a69cf_5 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft4zgensym_86cf238d4b0a69cf_5, missingFieldsLeft4zgensym_86cf238d4b0a69cf_5, msgp.ShowFound(found4zgensym_86cf238d4b0a69cf_5[:]), unmarshalMsgFieldOrder4zgensym_86cf238d4b0a69cf_5)
		if encodedFieldsLeft4zgensym_86cf238d4b0a69cf_5 > 0 {
			encodedFieldsLeft4zgensym_86cf238d4b0a69cf_5--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField4zgensym_86cf238d4b0a69cf_5 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss4zgensym_86cf238d4b0a69cf_5 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss4zgensym_86cf238d4b0a69cf_5 = 0
			}
			for nextMiss4zgensym_86cf238d4b0a69cf_5 < maxFields4zgensym_86cf238d4b0a69cf_5 && (found4zgensym_86cf238d4b0a69cf_5[nextMiss4zgensym_86cf238d4b0a69cf_5] || unmarshalMsgFieldSkip4zgensym_86cf238d4b0a69cf_5[nextMiss4zgensym_86cf238d4b0a69cf_5]) {
				nextMiss4zgensym_86cf238d4b0a69cf_5++
			}
			if nextMiss4zgensym_86cf238d4b0a69cf_5 == maxFields4zgensym_86cf238d4b0a69cf_5 {
				// filled all the empty fields!
				break doneWithStruct4zgensym_86cf238d4b0a69cf_5
			}
			missingFieldsLeft4zgensym_86cf238d4b0a69cf_5--
			curField4zgensym_86cf238d4b0a69cf_5 = unmarshalMsgFieldOrder4zgensym_86cf238d4b0a69cf_5[nextMiss4zgensym_86cf238d4b0a69cf_5]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField4zgensym_86cf238d4b0a69cf_5)
		switch curField4zgensym_86cf238d4b0a69cf_5 {
		// -- templateUnmarshalMsg ends here --

		case "val_zid00_f64":
			found4zgensym_86cf238d4b0a69cf_5[0] = true
			z.Val, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case "ts_zid01_u64":
			found4zgensym_86cf238d4b0a69cf_5[1] = true
			z.Timestamp, bts, err = nbs.ReadUint64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss4zgensym_86cf238d4b0a69cf_5 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SensorData
var unmarshalMsgFieldOrder4zgensym_86cf238d4b0a69cf_5 = []string{"val_zid00_f64", "ts_zid01_u64"}

var unmarshalMsgFieldSkip4zgensym_86cf238d4b0a69cf_5 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SensorData) Msgsize() (s int) {
	s = 1 + 14 + msgp.Float64Size + 13 + msgp.Uint64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *SumAndHist) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields6zgensym_86cf238d4b0a69cf_7 = 1

	// -- templateDecodeMsg starts here--
	var totalEncodedFields6zgensym_86cf238d4b0a69cf_7 uint32
	totalEncodedFields6zgensym_86cf238d4b0a69cf_7, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft6zgensym_86cf238d4b0a69cf_7 := totalEncodedFields6zgensym_86cf238d4b0a69cf_7
	missingFieldsLeft6zgensym_86cf238d4b0a69cf_7 := maxFields6zgensym_86cf238d4b0a69cf_7 - totalEncodedFields6zgensym_86cf238d4b0a69cf_7

	var nextMiss6zgensym_86cf238d4b0a69cf_7 int32 = -1
	var found6zgensym_86cf238d4b0a69cf_7 [maxFields6zgensym_86cf238d4b0a69cf_7]bool
	var curField6zgensym_86cf238d4b0a69cf_7 string

doneWithStruct6zgensym_86cf238d4b0a69cf_7:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft6zgensym_86cf238d4b0a69cf_7 > 0 || missingFieldsLeft6zgensym_86cf238d4b0a69cf_7 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft6zgensym_86cf238d4b0a69cf_7, missingFieldsLeft6zgensym_86cf238d4b0a69cf_7, msgp.ShowFound(found6zgensym_86cf238d4b0a69cf_7[:]), decodeMsgFieldOrder6zgensym_86cf238d4b0a69cf_7)
		if encodedFieldsLeft6zgensym_86cf238d4b0a69cf_7 > 0 {
			encodedFieldsLeft6zgensym_86cf238d4b0a69cf_7--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField6zgensym_86cf238d4b0a69cf_7 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss6zgensym_86cf238d4b0a69cf_7 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss6zgensym_86cf238d4b0a69cf_7 = 0
			}
			for nextMiss6zgensym_86cf238d4b0a69cf_7 < maxFields6zgensym_86cf238d4b0a69cf_7 && (found6zgensym_86cf238d4b0a69cf_7[nextMiss6zgensym_86cf238d4b0a69cf_7] || decodeMsgFieldSkip6zgensym_86cf238d4b0a69cf_7[nextMiss6zgensym_86cf238d4b0a69cf_7]) {
				nextMiss6zgensym_86cf238d4b0a69cf_7++
			}
			if nextMiss6zgensym_86cf238d4b0a69cf_7 == maxFields6zgensym_86cf238d4b0a69cf_7 {
				// filled all the empty fields!
				break doneWithStruct6zgensym_86cf238d4b0a69cf_7
			}
			missingFieldsLeft6zgensym_86cf238d4b0a69cf_7--
			curField6zgensym_86cf238d4b0a69cf_7 = decodeMsgFieldOrder6zgensym_86cf238d4b0a69cf_7[nextMiss6zgensym_86cf238d4b0a69cf_7]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField6zgensym_86cf238d4b0a69cf_7)
		switch curField6zgensym_86cf238d4b0a69cf_7 {
		// -- templateDecodeMsg ends here --

		case "sum_zid00_f64":
			found6zgensym_86cf238d4b0a69cf_7[0] = true
			z.Sum, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss6zgensym_86cf238d4b0a69cf_7 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SumAndHist
var decodeMsgFieldOrder6zgensym_86cf238d4b0a69cf_7 = []string{"sum_zid00_f64"}

var decodeMsgFieldSkip6zgensym_86cf238d4b0a69cf_7 = []bool{false}

// fieldsNotEmpty supports omitempty tags
func (z SumAndHist) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 1
	}
	var fieldsInUse uint32 = 1
	isempty[0] = (z.Sum == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z SumAndHist) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_86cf238d4b0a69cf_8 [1]bool
	fieldsInUse_zgensym_86cf238d4b0a69cf_9 := z.fieldsNotEmpty(empty_zgensym_86cf238d4b0a69cf_8[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_86cf238d4b0a69cf_9 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'SumAndHist'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x53, 0x75, 0x6d, 0x41, 0x6e, 0x64, 0x48, 0x69, 0x73, 0x74})
	if err != nil {
		return err
	}

	if !empty_zgensym_86cf238d4b0a69cf_8[0] {
		// write "sum_zid00_f64"
		err = en.Append(0xad, 0x73, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x66, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteFloat64(z.Sum)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z SumAndHist) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [1]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "sum_zid00_f64"
		o = append(o, 0xad, 0x73, 0x75, 0x6d, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x66, 0x36, 0x34)
		o = msgp.AppendFloat64(o, z.Sum)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *SumAndHist) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *SumAndHist) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields10zgensym_86cf238d4b0a69cf_11 = 1

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields10zgensym_86cf238d4b0a69cf_11 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields10zgensym_86cf238d4b0a69cf_11, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft10zgensym_86cf238d4b0a69cf_11 := totalEncodedFields10zgensym_86cf238d4b0a69cf_11
	missingFieldsLeft10zgensym_86cf238d4b0a69cf_11 := maxFields10zgensym_86cf238d4b0a69cf_11 - totalEncodedFields10zgensym_86cf238d4b0a69cf_11

	var nextMiss10zgensym_86cf238d4b0a69cf_11 int32 = -1
	var found10zgensym_86cf238d4b0a69cf_11 [maxFields10zgensym_86cf238d4b0a69cf_11]bool
	var curField10zgensym_86cf238d4b0a69cf_11 string

doneWithStruct10zgensym_86cf238d4b0a69cf_11:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft10zgensym_86cf238d4b0a69cf_11 > 0 || missingFieldsLeft10zgensym_86cf238d4b0a69cf_11 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft10zgensym_86cf238d4b0a69cf_11, missingFieldsLeft10zgensym_86cf238d4b0a69cf_11, msgp.ShowFound(found10zgensym_86cf238d4b0a69cf_11[:]), unmarshalMsgFieldOrder10zgensym_86cf238d4b0a69cf_11)
		if encodedFieldsLeft10zgensym_86cf238d4b0a69cf_11 > 0 {
			encodedFieldsLeft10zgensym_86cf238d4b0a69cf_11--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField10zgensym_86cf238d4b0a69cf_11 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss10zgensym_86cf238d4b0a69cf_11 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss10zgensym_86cf238d4b0a69cf_11 = 0
			}
			for nextMiss10zgensym_86cf238d4b0a69cf_11 < maxFields10zgensym_86cf238d4b0a69cf_11 && (found10zgensym_86cf238d4b0a69cf_11[nextMiss10zgensym_86cf238d4b0a69cf_11] || unmarshalMsgFieldSkip10zgensym_86cf238d4b0a69cf_11[nextMiss10zgensym_86cf238d4b0a69cf_11]) {
				nextMiss10zgensym_86cf238d4b0a69cf_11++
			}
			if nextMiss10zgensym_86cf238d4b0a69cf_11 == maxFields10zgensym_86cf238d4b0a69cf_11 {
				// filled all the empty fields!
				break doneWithStruct10zgensym_86cf238d4b0a69cf_11
			}
			missingFieldsLeft10zgensym_86cf238d4b0a69cf_11--
			curField10zgensym_86cf238d4b0a69cf_11 = unmarshalMsgFieldOrder10zgensym_86cf238d4b0a69cf_11[nextMiss10zgensym_86cf238d4b0a69cf_11]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField10zgensym_86cf238d4b0a69cf_11)
		switch curField10zgensym_86cf238d4b0a69cf_11 {
		// -- templateUnmarshalMsg ends here --

		case "sum_zid00_f64":
			found10zgensym_86cf238d4b0a69cf_11[0] = true
			z.Sum, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss10zgensym_86cf238d4b0a69cf_11 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of SumAndHist
var unmarshalMsgFieldOrder10zgensym_86cf238d4b0a69cf_11 = []string{"sum_zid00_f64"}

var unmarshalMsgFieldSkip10zgensym_86cf238d4b0a69cf_11 = []bool{false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z SumAndHist) Msgsize() (s int) {
	s = 1 + 14 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
// We treat empty fields as if we read a Nil from the wire.
func (z *ValAndAvg) DecodeMsg(dc *msgp.Reader) (err error) {
	var sawTopNil bool
	if dc.IsNil() {
		sawTopNil = true
		err = dc.ReadNil()
		if err != nil {
			return
		}
		dc.PushAlwaysNil()
	}

	var field []byte
	_ = field
	const maxFields12zgensym_86cf238d4b0a69cf_13 = 2

	// -- templateDecodeMsg starts here--
	var totalEncodedFields12zgensym_86cf238d4b0a69cf_13 uint32
	totalEncodedFields12zgensym_86cf238d4b0a69cf_13, err = dc.ReadMapHeader()
	if err != nil {
		return
	}
	encodedFieldsLeft12zgensym_86cf238d4b0a69cf_13 := totalEncodedFields12zgensym_86cf238d4b0a69cf_13
	missingFieldsLeft12zgensym_86cf238d4b0a69cf_13 := maxFields12zgensym_86cf238d4b0a69cf_13 - totalEncodedFields12zgensym_86cf238d4b0a69cf_13

	var nextMiss12zgensym_86cf238d4b0a69cf_13 int32 = -1
	var found12zgensym_86cf238d4b0a69cf_13 [maxFields12zgensym_86cf238d4b0a69cf_13]bool
	var curField12zgensym_86cf238d4b0a69cf_13 string

doneWithStruct12zgensym_86cf238d4b0a69cf_13:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft12zgensym_86cf238d4b0a69cf_13 > 0 || missingFieldsLeft12zgensym_86cf238d4b0a69cf_13 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft12zgensym_86cf238d4b0a69cf_13, missingFieldsLeft12zgensym_86cf238d4b0a69cf_13, msgp.ShowFound(found12zgensym_86cf238d4b0a69cf_13[:]), decodeMsgFieldOrder12zgensym_86cf238d4b0a69cf_13)
		if encodedFieldsLeft12zgensym_86cf238d4b0a69cf_13 > 0 {
			encodedFieldsLeft12zgensym_86cf238d4b0a69cf_13--
			field, err = dc.ReadMapKeyPtr()
			if err != nil {
				return
			}
			curField12zgensym_86cf238d4b0a69cf_13 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss12zgensym_86cf238d4b0a69cf_13 < 0 {
				// tell the reader to only give us Nils
				// until further notice.
				dc.PushAlwaysNil()
				nextMiss12zgensym_86cf238d4b0a69cf_13 = 0
			}
			for nextMiss12zgensym_86cf238d4b0a69cf_13 < maxFields12zgensym_86cf238d4b0a69cf_13 && (found12zgensym_86cf238d4b0a69cf_13[nextMiss12zgensym_86cf238d4b0a69cf_13] || decodeMsgFieldSkip12zgensym_86cf238d4b0a69cf_13[nextMiss12zgensym_86cf238d4b0a69cf_13]) {
				nextMiss12zgensym_86cf238d4b0a69cf_13++
			}
			if nextMiss12zgensym_86cf238d4b0a69cf_13 == maxFields12zgensym_86cf238d4b0a69cf_13 {
				// filled all the empty fields!
				break doneWithStruct12zgensym_86cf238d4b0a69cf_13
			}
			missingFieldsLeft12zgensym_86cf238d4b0a69cf_13--
			curField12zgensym_86cf238d4b0a69cf_13 = decodeMsgFieldOrder12zgensym_86cf238d4b0a69cf_13[nextMiss12zgensym_86cf238d4b0a69cf_13]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField12zgensym_86cf238d4b0a69cf_13)
		switch curField12zgensym_86cf238d4b0a69cf_13 {
		// -- templateDecodeMsg ends here --

		case "val_zid00_f64":
			found12zgensym_86cf238d4b0a69cf_13[0] = true
			z.Val, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		case "avg_zid01_f64":
			found12zgensym_86cf238d4b0a69cf_13[1] = true
			z.Avg, err = dc.ReadFloat64()
			if err != nil {
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				return
			}
		}
	}
	if nextMiss12zgensym_86cf238d4b0a69cf_13 != -1 {
		dc.PopAlwaysNil()
	}

	if sawTopNil {
		dc.PopAlwaysNil()
	}

	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ValAndAvg
var decodeMsgFieldOrder12zgensym_86cf238d4b0a69cf_13 = []string{"val_zid00_f64", "avg_zid01_f64"}

var decodeMsgFieldSkip12zgensym_86cf238d4b0a69cf_13 = []bool{false, false}

// fieldsNotEmpty supports omitempty tags
func (z ValAndAvg) fieldsNotEmpty(isempty []bool) uint32 {
	if len(isempty) == 0 {
		return 2
	}
	var fieldsInUse uint32 = 2
	isempty[0] = (z.Val == 0) // number, omitempty
	if isempty[0] {
		fieldsInUse--
	}
	isempty[1] = (z.Avg == 0) // number, omitempty
	if isempty[1] {
		fieldsInUse--
	}

	return fieldsInUse
}

// EncodeMsg implements msgp.Encodable
func (z ValAndAvg) EncodeMsg(en *msgp.Writer) (err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	// honor the omitempty tags
	var empty_zgensym_86cf238d4b0a69cf_14 [2]bool
	fieldsInUse_zgensym_86cf238d4b0a69cf_15 := z.fieldsNotEmpty(empty_zgensym_86cf238d4b0a69cf_14[:])

	// map header
	err = en.WriteMapHeader(fieldsInUse_zgensym_86cf238d4b0a69cf_15 + 1)
	if err != nil {
		return err
	}

	// runtime struct type identification for 'ValAndAvg'
	err = en.Append(0xa1, 0x40)
	if err != nil {
		return err
	}
	err = en.WriteStringFromBytes([]byte{0x56, 0x61, 0x6c, 0x41, 0x6e, 0x64, 0x41, 0x76, 0x67})
	if err != nil {
		return err
	}

	if !empty_zgensym_86cf238d4b0a69cf_14[0] {
		// write "val_zid00_f64"
		err = en.Append(0xad, 0x76, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x66, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteFloat64(z.Val)
		if err != nil {
			return
		}
	}

	if !empty_zgensym_86cf238d4b0a69cf_14[1] {
		// write "avg_zid01_f64"
		err = en.Append(0xad, 0x61, 0x76, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x66, 0x36, 0x34)
		if err != nil {
			return err
		}
		err = en.WriteFloat64(z.Avg)
		if err != nil {
			return
		}
	}

	return
}

// MarshalMsg implements msgp.Marshaler
func (z ValAndAvg) MarshalMsg(b []byte) (o []byte, err error) {
	if p, ok := interface{}(z).(msgp.PreSave); ok {
		p.PreSaveHook()
	}

	o = msgp.Require(b, z.Msgsize())

	// honor the omitempty tags
	var empty [2]bool
	fieldsInUse := z.fieldsNotEmpty(empty[:])
	o = msgp.AppendMapHeader(o, fieldsInUse)

	if !empty[0] {
		// string "val_zid00_f64"
		o = append(o, 0xad, 0x76, 0x61, 0x6c, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x30, 0x5f, 0x66, 0x36, 0x34)
		o = msgp.AppendFloat64(o, z.Val)
	}

	if !empty[1] {
		// string "avg_zid01_f64"
		o = append(o, 0xad, 0x61, 0x76, 0x67, 0x5f, 0x7a, 0x69, 0x64, 0x30, 0x31, 0x5f, 0x66, 0x36, 0x34)
		o = msgp.AppendFloat64(o, z.Avg)
	}

	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ValAndAvg) UnmarshalMsg(bts []byte) (o []byte, err error) {
	return z.UnmarshalMsgWithCfg(bts, nil)
}
func (z *ValAndAvg) UnmarshalMsgWithCfg(bts []byte, cfg *msgp.RuntimeConfig) (o []byte, err error) {
	var nbs msgp.NilBitsStack
	nbs.Init(cfg)
	var sawTopNil bool
	if msgp.IsNil(bts) {
		sawTopNil = true
		bts = nbs.PushAlwaysNil(bts[1:])
	}

	var field []byte
	_ = field
	const maxFields16zgensym_86cf238d4b0a69cf_17 = 2

	// -- templateUnmarshalMsg starts here--
	var totalEncodedFields16zgensym_86cf238d4b0a69cf_17 uint32
	if !nbs.AlwaysNil {
		totalEncodedFields16zgensym_86cf238d4b0a69cf_17, bts, err = nbs.ReadMapHeaderBytes(bts)
		if err != nil {
			return
		}
	}
	encodedFieldsLeft16zgensym_86cf238d4b0a69cf_17 := totalEncodedFields16zgensym_86cf238d4b0a69cf_17
	missingFieldsLeft16zgensym_86cf238d4b0a69cf_17 := maxFields16zgensym_86cf238d4b0a69cf_17 - totalEncodedFields16zgensym_86cf238d4b0a69cf_17

	var nextMiss16zgensym_86cf238d4b0a69cf_17 int32 = -1
	var found16zgensym_86cf238d4b0a69cf_17 [maxFields16zgensym_86cf238d4b0a69cf_17]bool
	var curField16zgensym_86cf238d4b0a69cf_17 string

doneWithStruct16zgensym_86cf238d4b0a69cf_17:
	// First fill all the encoded fields, then
	// treat the remaining, missing fields, as Nil.
	for encodedFieldsLeft16zgensym_86cf238d4b0a69cf_17 > 0 || missingFieldsLeft16zgensym_86cf238d4b0a69cf_17 > 0 {
		//fmt.Printf("encodedFieldsLeft: %v, missingFieldsLeft: %v, found: '%v', fields: '%#v'\n", encodedFieldsLeft16zgensym_86cf238d4b0a69cf_17, missingFieldsLeft16zgensym_86cf238d4b0a69cf_17, msgp.ShowFound(found16zgensym_86cf238d4b0a69cf_17[:]), unmarshalMsgFieldOrder16zgensym_86cf238d4b0a69cf_17)
		if encodedFieldsLeft16zgensym_86cf238d4b0a69cf_17 > 0 {
			encodedFieldsLeft16zgensym_86cf238d4b0a69cf_17--
			field, bts, err = nbs.ReadMapKeyZC(bts)
			if err != nil {
				return
			}
			curField16zgensym_86cf238d4b0a69cf_17 = msgp.UnsafeString(field)
		} else {
			//missing fields need handling
			if nextMiss16zgensym_86cf238d4b0a69cf_17 < 0 {
				// set bts to contain just mnil (0xc0)
				bts = nbs.PushAlwaysNil(bts)
				nextMiss16zgensym_86cf238d4b0a69cf_17 = 0
			}
			for nextMiss16zgensym_86cf238d4b0a69cf_17 < maxFields16zgensym_86cf238d4b0a69cf_17 && (found16zgensym_86cf238d4b0a69cf_17[nextMiss16zgensym_86cf238d4b0a69cf_17] || unmarshalMsgFieldSkip16zgensym_86cf238d4b0a69cf_17[nextMiss16zgensym_86cf238d4b0a69cf_17]) {
				nextMiss16zgensym_86cf238d4b0a69cf_17++
			}
			if nextMiss16zgensym_86cf238d4b0a69cf_17 == maxFields16zgensym_86cf238d4b0a69cf_17 {
				// filled all the empty fields!
				break doneWithStruct16zgensym_86cf238d4b0a69cf_17
			}
			missingFieldsLeft16zgensym_86cf238d4b0a69cf_17--
			curField16zgensym_86cf238d4b0a69cf_17 = unmarshalMsgFieldOrder16zgensym_86cf238d4b0a69cf_17[nextMiss16zgensym_86cf238d4b0a69cf_17]
		}
		//fmt.Printf("switching on curField: '%v'\n", curField16zgensym_86cf238d4b0a69cf_17)
		switch curField16zgensym_86cf238d4b0a69cf_17 {
		// -- templateUnmarshalMsg ends here --

		case "val_zid00_f64":
			found16zgensym_86cf238d4b0a69cf_17[0] = true
			z.Val, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		case "avg_zid01_f64":
			found16zgensym_86cf238d4b0a69cf_17[1] = true
			z.Avg, bts, err = nbs.ReadFloat64Bytes(bts)

			if err != nil {
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				return
			}
		}
	}
	if nextMiss16zgensym_86cf238d4b0a69cf_17 != -1 {
		bts = nbs.PopAlwaysNil()
	}

	if sawTopNil {
		bts = nbs.PopAlwaysNil()
	}
	o = bts
	if p, ok := interface{}(z).(msgp.PostLoad); ok {
		p.PostLoadHook()
	}

	return
}

// fields of ValAndAvg
var unmarshalMsgFieldOrder16zgensym_86cf238d4b0a69cf_17 = []string{"val_zid00_f64", "avg_zid01_f64"}

var unmarshalMsgFieldSkip16zgensym_86cf238d4b0a69cf_17 = []bool{false, false}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ValAndAvg) Msgsize() (s int) {
	s = 1 + 14 + msgp.Float64Size + 14 + msgp.Float64Size
	return
}
